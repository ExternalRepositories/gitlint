{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intro Gitlint is a git commit message linter written in python: it checks your commit messages for style. Great for use as a commit-msg git hook or as part of your gating script in a CI pipeline (e.g. Jenkins) . Note Gitlint support for Windows is still experimental , and there are some known issues . Also, gitlint is not the only git commit message linter out there, if you are looking for an alternative written in a different language, have a look at fit-commit (Ruby), node-commit-msg (Node.js) or commitlint (Node.js). Features Commit message hook : Auto-trigger validations against new commit message right when you're committing . Also works with pre-commit . Easily integrated : Gitlint is designed to work with your own scripts or CI system . Sane defaults: Many of gitlint's validations are based on well-known , community , standards , others are based on checks that we've found useful throughout the years. Easily configurable: Gitlint has sane defaults, but you can also easily customize it to your own liking . Community contributed rules : Conventions that are common but not universal can be selectively enabled . User-defined rules: Want to do more then what gitlint offers out of the box? Write your own user defined rules . Broad python version support: Gitlint supports python versions 2.7, 3.4+, PyPy2 and PyPy3.5. Full unicode support: Lint your Russian, Chinese or Emoji commit messages with ease! Production-ready: Gitlint checks a lot of the boxes you're looking for: high unit test coverage, integration tests, python code standards (pep8, pylint), good documentation, proven track record. Getting Started Installation # Pip is recommended to install the latest version pip install gitlint # macOS brew tap rockyluke/devops brew install gitlint # Ubuntu apt-get install gitlint Usage # Check the last commit message gitlint # Alternatively, pipe a commit message to gitlint: cat examples/commit-message-1 | gitlint # or git log -1 --pretty=%B | gitlint # Or read the commit-msg from a file, like so: gitlint --msg-filename examples/commit-message-2 # To install a gitlint as a commit-msg git hook: gitlint install-hook Output example: $ cat examples/commit-message-2 | gitlint 1: T1 Title exceeds max length (134 80): This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping 1: T2 Title has trailing whitespace: This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping 1: T4 Title contains hard tab characters (\\t): This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping 2: B4 Second line is not empty: This line should not contain text 3: B1 Line exceeds max length (125 80): Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. 3: B2 Line has trailing whitespace: Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. 3: B3 Line contains hard tab characters (\\t): Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. Note The returned exit code equals the number of errors found. Some exit codes are special . For a list of available rules and their configuration options, have a look at the Rules page. The Configuration page explains how you can modify gitlint's runtime behavior via command-line flags, a .gitlint configuration file or on a per commit basis. As a simple example, you can modify gitlint's verbosity using the -v flag, like so: $ cat examples/commit-message-2 | gitlint -v 1: T1 1: T2 [removed output] $ cat examples/commit-message-2 | gitlint -vv 1: T1 Title exceeds max length (134 80) 1: T2 Title has trailing whitespace 1: T4 Title contains hard tab characters (\\t) [removed output] $ cat examples/commit-message-2 | gitlint -vvv 1: T1 Title exceeds max length (134 80): This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping 1: T2 Title has trailing whitespace: This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping [removed output] The default verbosity is -vvv . Other commands and variations: $ gitlint --help Usage: gitlint [OPTIONS] COMMAND [ARGS]... Git lint tool, checks your git commit messages for styling issues Documentation: http://jorisroovers.github.io/gitlint Options: --target DIRECTORY Path of the target git repository. [default: current working directory] -C, --config FILE Config file location [default: .gitlint] -c TEXT Config flags in format rule . option = value (e.g.: -c T1.line-length=80). Flag can be used multiple times to set multiple config values. --commits TEXT The range of commits to lint. [default: HEAD] -e, --extra-path PATH Path to a directory or python module with extra user-defined rules --ignore TEXT Ignore rules (comma-separated by id or name). --contrib TEXT Contrib rules to enable (comma-separated by id or name). --msg-filename FILENAME Path to a file containing a commit-msg. --ignore-stdin Ignore any stdin data. Useful for running in CI server. -v, --verbose Verbosity, more v's for more verbose output (e.g.: -v, -vv, -vvv). [default: -vvv] -s, --silent Silent mode (no output). Takes precedence over -v, -vv, -vvv. -d, --debug Enable debugging output. --version Show the version and exit. --help Show this message and exit. Commands: generate-config Generates a sample gitlint config file. install-hook Install gitlint as a git commit-msg hook. lint Lints a git repository [default command] uninstall-hook Uninstall gitlint commit-msg hook. When no COMMAND is specified, gitlint defaults to 'gitlint lint'. Using gitlint as a commit-msg hook Introduced in gitlint v0.4.0 You can also install gitlint as a git commit-msg hook so that gitlint checks your commit messages automatically after each commit. gitlint install-hook # To remove the hook gitlint uninstall-hook Important Gitlint cannot work together with an existing hook. If you already have a .git/hooks/commit-msg file in your local repository, gitlint will refuse to install the commit-msg hook. Gitlint will also only uninstall unmodified commit-msg hooks that were installed by gitlint. If you're looking to use gitlint in conjunction with other hooks, you should consider using gitlint with pre-commit . Using gitlint through pre-commit gitlint can be configured as a plugin for the pre-commit git hooks framework. Simply add the configuration to your .pre-commit-config.yaml : - repo: https://github.com/jorisroovers/gitlint rev: # Fill in a tag / sha here hooks: - id: gitlint You then need to install the pre-commit hook like so: pre-commit install --hook-type commit-msg Important It's important that you run pre-commit install --hook-type commit-msg , even if you've already used pre-commit install before. pre-commit install does not install commit-msg hooks by default! To manually trigger gitlint using pre-commit for your last commit message, use the following command: pre-commit run gitlint --hook-stage commit-msg --commit-msg-filename .git/COMMIT_EDITMSG Using gitlint in a CI environment By default, when just running gitlint without additional parameters, gitlint lints the last commit in the current working directory. This makes it easy to add gitlint to a check script that is run in a CI environment (Jenkins, TravisCI, pre-commit, CircleCI, Gitlab, etc). In fact, this is exactly what we do ourselves: on every commit, we run gitlint as part of our travisCI tests . This will cause the build to fail when we submit a bad commit message. Note Versions prior to gitlint 0.9.0 required a TTY to be attached to STDIN for this to work, this is no longer required now. Alternatively, gitlint will also lint any commit message that you feed it via stdin like so: # lint the last commit message git log -1 --pretty=%B | gitlint # lint a specific commit: 62c0519 git log -1 --pretty=%B 62c0519 | gitlint Note that gitlint requires that you specify --pretty=%B (=only print the log message, not the metadata), future versions of gitlint might fix this and not require the --pretty argument. Linting a range of commits Introduced in gitlint v0.9.0 (experimental in v0.8.0) Gitlint allows users to commit a number of commits at once like so: # Lint a specific commit range: gitlint --commits 019cf40...d6bc75a # You can also use git's special references: gitlint --commits origin..HEAD # Or specify a single specific commit in refspec format, like so: gitlint --commits 019cf40^...019cf40 The --commits flag takes a single refspec argument or commit range. Basically, any range that is understood by git rev-list as a single argument will work. Prior to v0.8.1 gitlint didn't support this feature. However, older versions of gitlint can still lint a range or set of commits at once by creating a simple bash script that pipes the commit messages one by one into gitlint. This approach can still be used with newer versions of gitlint in case --commits doesn't provide the flexibility you are looking for. #!/bin/bash for commit in $(git rev-list master); do commit_msg=$(git log -1 --pretty=%B $commit) echo $commit echo $commit_msg | gitlint echo -------- done Note One downside to this approach is that you invoke gitlint once per commit vs. once per set of commits. This means you'll incur the gitlint startup time once per commit, making this approach rather slow if you want to lint a large set of commits. Always use --commits if you can to avoid this performance penalty. Merge, fixup and squash commits Introduced in gitlint v0.7.0 (merge commits) and gitlint v0.9.0 (fixup, squash) Gitlint ignores merge, fixup and squash commits by default. Note Right now, gitlint does not ignore revert commits. This is something we'd like to add in the future. If this is something you're interested in please let us know by opening an issue . For merge commits, the rationale for ignoring them is that in many cases merge commits are not created by users themselves but by tools such as github, gerrit and others. These tools often generate merge commit messages that violate gitlint's set of rules (a common example is \"Merge:\" being auto-prepended which can trigger a title-max-length violation) and it's not always convenient or desired to change those. For squash and fixup commits, the rationale is that these are temporary commits that will be squashed into a different commit, and hence the commit messages for these commits are very short-lived and not intended to make it into the final commit history. In addition, by prepending \"fixup!\" or \"squash!\" to your commit message, certain gitlint rules might be violated (e.g. title-max-length ) which is often undesirable. In case you do want to lint these commit messages, you can disable this behavior by setting the general ignore-merge-commits , ignore-fixup-commits or ignore-squash-commits option to false using one of the various ways to configure gitlint . Ignoring commits Introduced in gitlint v0.10.0 You can configure gitlint to ignore specific commits. One way to do this, is to by adding a gitline-ignore line to your commit message . If you have a case where you want to ignore a certain type of commits all-together, you can use gitlint's ignore rules to do so. Here's an example gitlint file that configures gitlint to ignore rules title-max-length and body-min-length for all commits with a title starting with \"Release\" . [ignore-by-title] # Match commit titles starting with Release regex=^Release(.*) ignore=title-max-length,body-min-length # ignore all rules by setting ignore to 'all' # ignore=all [ignore-by-title] # Match commits message bodies that have a line that contains 'release' regex=(.*)release(.*) ignore=all Note Right now it's not possible to write user-defined ignore rules to handle more complex use-cases. This is however something that we'd like to implement in a future version. If this is something you're interested in please let us know by opening an issue . Exit codes Gitlint uses the exit code as a simple way to indicate the number of violations found. Some exit codes are used to indicate special errors as indicated in the table below. Because of these special error codes and the fact that bash only supports exit codes between 0 and 255 , the maximum number of violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations it can detect, it will just always return with exit code 252 when the number of violations is greater than or equal to 252. Exit Code Description 253 Wrong invocation of the gitlint command. 254 Something went wrong when invoking git. 255 Invalid gitlint configuration","title":"Home"},{"location":"#intro","text":"Gitlint is a git commit message linter written in python: it checks your commit messages for style. Great for use as a commit-msg git hook or as part of your gating script in a CI pipeline (e.g. Jenkins) . Note Gitlint support for Windows is still experimental , and there are some known issues . Also, gitlint is not the only git commit message linter out there, if you are looking for an alternative written in a different language, have a look at fit-commit (Ruby), node-commit-msg (Node.js) or commitlint (Node.js).","title":"Intro"},{"location":"#features","text":"Commit message hook : Auto-trigger validations against new commit message right when you're committing . Also works with pre-commit . Easily integrated : Gitlint is designed to work with your own scripts or CI system . Sane defaults: Many of gitlint's validations are based on well-known , community , standards , others are based on checks that we've found useful throughout the years. Easily configurable: Gitlint has sane defaults, but you can also easily customize it to your own liking . Community contributed rules : Conventions that are common but not universal can be selectively enabled . User-defined rules: Want to do more then what gitlint offers out of the box? Write your own user defined rules . Broad python version support: Gitlint supports python versions 2.7, 3.4+, PyPy2 and PyPy3.5. Full unicode support: Lint your Russian, Chinese or Emoji commit messages with ease! Production-ready: Gitlint checks a lot of the boxes you're looking for: high unit test coverage, integration tests, python code standards (pep8, pylint), good documentation, proven track record.","title":"Features"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#installation","text":"# Pip is recommended to install the latest version pip install gitlint # macOS brew tap rockyluke/devops brew install gitlint # Ubuntu apt-get install gitlint","title":"Installation"},{"location":"#usage","text":"# Check the last commit message gitlint # Alternatively, pipe a commit message to gitlint: cat examples/commit-message-1 | gitlint # or git log -1 --pretty=%B | gitlint # Or read the commit-msg from a file, like so: gitlint --msg-filename examples/commit-message-2 # To install a gitlint as a commit-msg git hook: gitlint install-hook Output example: $ cat examples/commit-message-2 | gitlint 1: T1 Title exceeds max length (134 80): This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping 1: T2 Title has trailing whitespace: This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping 1: T4 Title contains hard tab characters (\\t): This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping 2: B4 Second line is not empty: This line should not contain text 3: B1 Line exceeds max length (125 80): Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. 3: B2 Line has trailing whitespace: Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. 3: B3 Line contains hard tab characters (\\t): Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. Note The returned exit code equals the number of errors found. Some exit codes are special . For a list of available rules and their configuration options, have a look at the Rules page. The Configuration page explains how you can modify gitlint's runtime behavior via command-line flags, a .gitlint configuration file or on a per commit basis. As a simple example, you can modify gitlint's verbosity using the -v flag, like so: $ cat examples/commit-message-2 | gitlint -v 1: T1 1: T2 [removed output] $ cat examples/commit-message-2 | gitlint -vv 1: T1 Title exceeds max length (134 80) 1: T2 Title has trailing whitespace 1: T4 Title contains hard tab characters (\\t) [removed output] $ cat examples/commit-message-2 | gitlint -vvv 1: T1 Title exceeds max length (134 80): This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping 1: T2 Title has trailing whitespace: This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping [removed output] The default verbosity is -vvv . Other commands and variations: $ gitlint --help Usage: gitlint [OPTIONS] COMMAND [ARGS]... Git lint tool, checks your git commit messages for styling issues Documentation: http://jorisroovers.github.io/gitlint Options: --target DIRECTORY Path of the target git repository. [default: current working directory] -C, --config FILE Config file location [default: .gitlint] -c TEXT Config flags in format rule . option = value (e.g.: -c T1.line-length=80). Flag can be used multiple times to set multiple config values. --commits TEXT The range of commits to lint. [default: HEAD] -e, --extra-path PATH Path to a directory or python module with extra user-defined rules --ignore TEXT Ignore rules (comma-separated by id or name). --contrib TEXT Contrib rules to enable (comma-separated by id or name). --msg-filename FILENAME Path to a file containing a commit-msg. --ignore-stdin Ignore any stdin data. Useful for running in CI server. -v, --verbose Verbosity, more v's for more verbose output (e.g.: -v, -vv, -vvv). [default: -vvv] -s, --silent Silent mode (no output). Takes precedence over -v, -vv, -vvv. -d, --debug Enable debugging output. --version Show the version and exit. --help Show this message and exit. Commands: generate-config Generates a sample gitlint config file. install-hook Install gitlint as a git commit-msg hook. lint Lints a git repository [default command] uninstall-hook Uninstall gitlint commit-msg hook. When no COMMAND is specified, gitlint defaults to 'gitlint lint'.","title":"Usage"},{"location":"#using-gitlint-as-a-commit-msg-hook","text":"Introduced in gitlint v0.4.0 You can also install gitlint as a git commit-msg hook so that gitlint checks your commit messages automatically after each commit. gitlint install-hook # To remove the hook gitlint uninstall-hook Important Gitlint cannot work together with an existing hook. If you already have a .git/hooks/commit-msg file in your local repository, gitlint will refuse to install the commit-msg hook. Gitlint will also only uninstall unmodified commit-msg hooks that were installed by gitlint. If you're looking to use gitlint in conjunction with other hooks, you should consider using gitlint with pre-commit .","title":"Using gitlint as a commit-msg hook"},{"location":"#using-gitlint-through-pre-commit","text":"gitlint can be configured as a plugin for the pre-commit git hooks framework. Simply add the configuration to your .pre-commit-config.yaml : - repo: https://github.com/jorisroovers/gitlint rev: # Fill in a tag / sha here hooks: - id: gitlint You then need to install the pre-commit hook like so: pre-commit install --hook-type commit-msg Important It's important that you run pre-commit install --hook-type commit-msg , even if you've already used pre-commit install before. pre-commit install does not install commit-msg hooks by default! To manually trigger gitlint using pre-commit for your last commit message, use the following command: pre-commit run gitlint --hook-stage commit-msg --commit-msg-filename .git/COMMIT_EDITMSG","title":"Using gitlint through pre-commit"},{"location":"#using-gitlint-in-a-ci-environment","text":"By default, when just running gitlint without additional parameters, gitlint lints the last commit in the current working directory. This makes it easy to add gitlint to a check script that is run in a CI environment (Jenkins, TravisCI, pre-commit, CircleCI, Gitlab, etc). In fact, this is exactly what we do ourselves: on every commit, we run gitlint as part of our travisCI tests . This will cause the build to fail when we submit a bad commit message. Note Versions prior to gitlint 0.9.0 required a TTY to be attached to STDIN for this to work, this is no longer required now. Alternatively, gitlint will also lint any commit message that you feed it via stdin like so: # lint the last commit message git log -1 --pretty=%B | gitlint # lint a specific commit: 62c0519 git log -1 --pretty=%B 62c0519 | gitlint Note that gitlint requires that you specify --pretty=%B (=only print the log message, not the metadata), future versions of gitlint might fix this and not require the --pretty argument.","title":"Using gitlint in a CI environment"},{"location":"#linting-a-range-of-commits","text":"Introduced in gitlint v0.9.0 (experimental in v0.8.0) Gitlint allows users to commit a number of commits at once like so: # Lint a specific commit range: gitlint --commits 019cf40...d6bc75a # You can also use git's special references: gitlint --commits origin..HEAD # Or specify a single specific commit in refspec format, like so: gitlint --commits 019cf40^...019cf40 The --commits flag takes a single refspec argument or commit range. Basically, any range that is understood by git rev-list as a single argument will work. Prior to v0.8.1 gitlint didn't support this feature. However, older versions of gitlint can still lint a range or set of commits at once by creating a simple bash script that pipes the commit messages one by one into gitlint. This approach can still be used with newer versions of gitlint in case --commits doesn't provide the flexibility you are looking for. #!/bin/bash for commit in $(git rev-list master); do commit_msg=$(git log -1 --pretty=%B $commit) echo $commit echo $commit_msg | gitlint echo -------- done Note One downside to this approach is that you invoke gitlint once per commit vs. once per set of commits. This means you'll incur the gitlint startup time once per commit, making this approach rather slow if you want to lint a large set of commits. Always use --commits if you can to avoid this performance penalty.","title":"Linting a range of commits"},{"location":"#merge-fixup-and-squash-commits","text":"Introduced in gitlint v0.7.0 (merge commits) and gitlint v0.9.0 (fixup, squash) Gitlint ignores merge, fixup and squash commits by default. Note Right now, gitlint does not ignore revert commits. This is something we'd like to add in the future. If this is something you're interested in please let us know by opening an issue . For merge commits, the rationale for ignoring them is that in many cases merge commits are not created by users themselves but by tools such as github, gerrit and others. These tools often generate merge commit messages that violate gitlint's set of rules (a common example is \"Merge:\" being auto-prepended which can trigger a title-max-length violation) and it's not always convenient or desired to change those. For squash and fixup commits, the rationale is that these are temporary commits that will be squashed into a different commit, and hence the commit messages for these commits are very short-lived and not intended to make it into the final commit history. In addition, by prepending \"fixup!\" or \"squash!\" to your commit message, certain gitlint rules might be violated (e.g. title-max-length ) which is often undesirable. In case you do want to lint these commit messages, you can disable this behavior by setting the general ignore-merge-commits , ignore-fixup-commits or ignore-squash-commits option to false using one of the various ways to configure gitlint .","title":"Merge, fixup and squash commits"},{"location":"#ignoring-commits","text":"Introduced in gitlint v0.10.0 You can configure gitlint to ignore specific commits. One way to do this, is to by adding a gitline-ignore line to your commit message . If you have a case where you want to ignore a certain type of commits all-together, you can use gitlint's ignore rules to do so. Here's an example gitlint file that configures gitlint to ignore rules title-max-length and body-min-length for all commits with a title starting with \"Release\" . [ignore-by-title] # Match commit titles starting with Release regex=^Release(.*) ignore=title-max-length,body-min-length # ignore all rules by setting ignore to 'all' # ignore=all [ignore-by-title] # Match commits message bodies that have a line that contains 'release' regex=(.*)release(.*) ignore=all Note Right now it's not possible to write user-defined ignore rules to handle more complex use-cases. This is however something that we'd like to implement in a future version. If this is something you're interested in please let us know by opening an issue .","title":"Ignoring commits"},{"location":"#exit-codes","text":"Gitlint uses the exit code as a simple way to indicate the number of violations found. Some exit codes are used to indicate special errors as indicated in the table below. Because of these special error codes and the fact that bash only supports exit codes between 0 and 255 , the maximum number of violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations it can detect, it will just always return with exit code 252 when the number of violations is greater than or equal to 252. Exit Code Description 253 Wrong invocation of the gitlint command. 254 Something went wrong when invoking git. 255 Invalid gitlint configuration","title":"Exit codes"},{"location":"configuration/","text":"Configuration Gitlint can be configured through different means. Config files You can modify gitlint's behavior by adding a .gitlint file to your git repository. Generate a default .gitlint config file by running: gitlint generate-config You can also use a different config file like so: gitlint --config myconfigfile.ini The block below shows a sample .gitlint file. Details about rule config options can be found on the Rules page, details about the [general] section can be found in the General Configuration section of this page. # All these sections are optional, edit this file as you like. # [general] # Ignore certain rules, you can reference them by their id or by their full name # ignore=title-trailing-punctuation, T3 # verbosity should be a value between 1 and 3, the commandline -v flags take precedence over this # verbosity = 2 # By default gitlint will ignore merge commits. Set to 'false' to disable. # ignore-merge-commits=true # By default gitlint will ignore fixup commits. Set to 'false' to disable. # ignore-fixup-commits=true # By default gitlint will ignore squash commits. Set to 'false' to disable. # ignore-squash-commits=true # Ignore any data send to gitlint via stdin # ignore-stdin=true # Enable debug mode (prints more output). Disabled by default. # debug=true # Enable community contributed rules # See http://jorisroovers.github.io/gitlint/contrib_rules for details # contrib=contrib-title-conventional-commits,CC1 # Set the extra-path where gitlint will search for user defined rules # See http://jorisroovers.github.io/gitlint/user_defined_rules for details # extra-path=examples/ # [title-max-length] # line-length=80 # [title-must-not-contain-word] # Comma-separated list of words that should not occur in the title. Matching is case # insensitive. It's fine if the keyword occurs as part of a larger word (so WIPING # will not cause a violation, but WIP: my title will. # words=wip # [title-match-regex] # python like regex (https://docs.python.org/2/library/re.html) that the # commit-msg title must be matched to. # Note that the regex can contradict with other rules if not used correctly # (e.g. title-must-not-contain-word). # regex=^US[0-9]* # [B1] # B1 = body-max-line-length # line-length=120 # [body-min-length] # min-length=5 # [body-is-missing] # Whether to ignore this rule on merge commits (which typically only have a title) # default = True # ignore-merge-commits=false # [body-changed-file-mention] # List of files that need to be explicitly mentioned in the body when they are changed # This is useful for when developers often erroneously edit certain files or git submodules. # By specifying this rule, developers can only change the file when they explicitly reference # it in the commit message. # files=gitlint/rules.py,README.md # [author-valid-email] # python like regex (https://docs.python.org/2/library/re.html) that the # commit author email address should be matched to # For example, use the following regex if you only want to allow email addresses from foo.com # regex=[^@]+@foo.com # [ignore-by-title] # Ignore certain rules for commits of which the title matches a regex # E.g. Match commit titles that start with Release # regex=^Release(.*) # # Ignore certain rules, you can reference them by their id or by their full name # Use 'all' to ignore all rules # ignore=T1,body-min-length # [ignore-by-body] # Ignore certain rules for commits of which the body has a line that matches a regex # E.g. Match bodies that have a line that that contain release # regex=(.*)release(.*) # # Ignore certain rules, you can reference them by their id or by their full name # Use 'all' to ignore all rules # ignore=T1,body-min-length # [contrib-title-conventional-commits] # Specify allowed commit types. For details see: https://www.conventionalcommits.org/ # types = bugfix,user-story,epic Commandline config You can also use one or more -c flags like so: $ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100 The generic config flag format is -c rule . option = value and supports all the same rules and options which you can also use in a .gitlint config file. Commit specific config You can also disable gitlint for specific commit messages by adding gitlint-ignore: all to the commit message like so: WIP: This is my commit message I want gitlint to ignore this entire commit message. gitlint-ignore: all gitlint-ignore: all can occur on any line, as long as it is at the start of the line. You can also specify specific rules to be ignored as follows: gitlint-ignore: T1, body-hard-tab . Configuration precedence gitlint configuration is applied in the following order of precedence: Commit specific config (e.g.: gitlint-ignore: all in the commit message) Commandline convenience flags (e.g.: -vv , --silent , --ignore ) Commandline configuration flags (e.g.: -c title-max-length=123 ) Configuration file (local .gitlint file, or file specified using -C / --config ) Default gitlint config General configuration The table below outlines configuration options that modify gitlint's overall behavior. These options can be specified using commandline flags or in general section in a .gitlint configuration file. Name Default value gitlint version commandline flag Description silent false = 0.1.0 --silent Enable silent mode (no output). Use exit code to determine result. verbosity 3 = 0.1.0 --verbose=3 Amount of output gitlint will show when printing errors. ignore-merge-commits true = 0.7.0 Not available Whether or not to ignore merge commits. ignore-fixup-commits true = 0.9.0 Not available Whether or not to ignore fixup commits. ignore-squash-commits true = 0.9.0 Not available Whether or not to ignore squash commits. ignore [] (=empty) = 0.1.0 --ignore=T1,body-min-length Comma seperated list of rules to ignore (by name or id) debug false = 0.7.1 --debug Enable debugging output target (empty) = 0.8.0 --target=/home/joe/myrepo/ Target git repository gitlint should be linting against. extra-path (empty) = 0.8.0 --extra-path=/home/joe/rules/ Path where gitlint looks for user-defined rules . contrib (empty) = 0.12.0 --contrib=contrib-title-conventional-commits,CC1 Contrib rules to enable. ignore-stdin false = 0.12.0 --ignore-stdin Ignore any stdin data. Useful for running in CI server.","title":"Configuration"},{"location":"configuration/#configuration","text":"Gitlint can be configured through different means.","title":"Configuration"},{"location":"configuration/#config-files","text":"You can modify gitlint's behavior by adding a .gitlint file to your git repository. Generate a default .gitlint config file by running: gitlint generate-config You can also use a different config file like so: gitlint --config myconfigfile.ini The block below shows a sample .gitlint file. Details about rule config options can be found on the Rules page, details about the [general] section can be found in the General Configuration section of this page. # All these sections are optional, edit this file as you like. # [general] # Ignore certain rules, you can reference them by their id or by their full name # ignore=title-trailing-punctuation, T3 # verbosity should be a value between 1 and 3, the commandline -v flags take precedence over this # verbosity = 2 # By default gitlint will ignore merge commits. Set to 'false' to disable. # ignore-merge-commits=true # By default gitlint will ignore fixup commits. Set to 'false' to disable. # ignore-fixup-commits=true # By default gitlint will ignore squash commits. Set to 'false' to disable. # ignore-squash-commits=true # Ignore any data send to gitlint via stdin # ignore-stdin=true # Enable debug mode (prints more output). Disabled by default. # debug=true # Enable community contributed rules # See http://jorisroovers.github.io/gitlint/contrib_rules for details # contrib=contrib-title-conventional-commits,CC1 # Set the extra-path where gitlint will search for user defined rules # See http://jorisroovers.github.io/gitlint/user_defined_rules for details # extra-path=examples/ # [title-max-length] # line-length=80 # [title-must-not-contain-word] # Comma-separated list of words that should not occur in the title. Matching is case # insensitive. It's fine if the keyword occurs as part of a larger word (so WIPING # will not cause a violation, but WIP: my title will. # words=wip # [title-match-regex] # python like regex (https://docs.python.org/2/library/re.html) that the # commit-msg title must be matched to. # Note that the regex can contradict with other rules if not used correctly # (e.g. title-must-not-contain-word). # regex=^US[0-9]* # [B1] # B1 = body-max-line-length # line-length=120 # [body-min-length] # min-length=5 # [body-is-missing] # Whether to ignore this rule on merge commits (which typically only have a title) # default = True # ignore-merge-commits=false # [body-changed-file-mention] # List of files that need to be explicitly mentioned in the body when they are changed # This is useful for when developers often erroneously edit certain files or git submodules. # By specifying this rule, developers can only change the file when they explicitly reference # it in the commit message. # files=gitlint/rules.py,README.md # [author-valid-email] # python like regex (https://docs.python.org/2/library/re.html) that the # commit author email address should be matched to # For example, use the following regex if you only want to allow email addresses from foo.com # regex=[^@]+@foo.com # [ignore-by-title] # Ignore certain rules for commits of which the title matches a regex # E.g. Match commit titles that start with Release # regex=^Release(.*) # # Ignore certain rules, you can reference them by their id or by their full name # Use 'all' to ignore all rules # ignore=T1,body-min-length # [ignore-by-body] # Ignore certain rules for commits of which the body has a line that matches a regex # E.g. Match bodies that have a line that that contain release # regex=(.*)release(.*) # # Ignore certain rules, you can reference them by their id or by their full name # Use 'all' to ignore all rules # ignore=T1,body-min-length # [contrib-title-conventional-commits] # Specify allowed commit types. For details see: https://www.conventionalcommits.org/ # types = bugfix,user-story,epic","title":"Config files"},{"location":"configuration/#commandline-config","text":"You can also use one or more -c flags like so: $ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100 The generic config flag format is -c rule . option = value and supports all the same rules and options which you can also use in a .gitlint config file.","title":"Commandline config"},{"location":"configuration/#commit-specific-config","text":"You can also disable gitlint for specific commit messages by adding gitlint-ignore: all to the commit message like so: WIP: This is my commit message I want gitlint to ignore this entire commit message. gitlint-ignore: all gitlint-ignore: all can occur on any line, as long as it is at the start of the line. You can also specify specific rules to be ignored as follows: gitlint-ignore: T1, body-hard-tab .","title":"Commit specific config"},{"location":"configuration/#configuration-precedence","text":"gitlint configuration is applied in the following order of precedence: Commit specific config (e.g.: gitlint-ignore: all in the commit message) Commandline convenience flags (e.g.: -vv , --silent , --ignore ) Commandline configuration flags (e.g.: -c title-max-length=123 ) Configuration file (local .gitlint file, or file specified using -C / --config ) Default gitlint config","title":"Configuration precedence"},{"location":"configuration/#general-configuration","text":"The table below outlines configuration options that modify gitlint's overall behavior. These options can be specified using commandline flags or in general section in a .gitlint configuration file. Name Default value gitlint version commandline flag Description silent false = 0.1.0 --silent Enable silent mode (no output). Use exit code to determine result. verbosity 3 = 0.1.0 --verbose=3 Amount of output gitlint will show when printing errors. ignore-merge-commits true = 0.7.0 Not available Whether or not to ignore merge commits. ignore-fixup-commits true = 0.9.0 Not available Whether or not to ignore fixup commits. ignore-squash-commits true = 0.9.0 Not available Whether or not to ignore squash commits. ignore [] (=empty) = 0.1.0 --ignore=T1,body-min-length Comma seperated list of rules to ignore (by name or id) debug false = 0.7.1 --debug Enable debugging output target (empty) = 0.8.0 --target=/home/joe/myrepo/ Target git repository gitlint should be linting against. extra-path (empty) = 0.8.0 --extra-path=/home/joe/rules/ Path where gitlint looks for user-defined rules . contrib (empty) = 0.12.0 --contrib=contrib-title-conventional-commits,CC1 Contrib rules to enable. ignore-stdin false = 0.12.0 --ignore-stdin Ignore any stdin data. Useful for running in CI server.","title":"General configuration"},{"location":"contrib_rules/","text":"Using Contrib Rules Introduced in gitlint v0.12.0 Contrib rules are community- contrib uted rules that are disabled by default, but can be enabled through configuration. Contrib rules are meant to augment default gitlint behavior by providing users with rules for common use-cases without forcing these rules on all gitlint users. In addition, Contrib rules enable re-usability so that users don't have to re-implement these commonly used rules themselves as user-defined rules. To enable certain contrib rules, you can use the --contrib flag. $ cat examples/commit-message-1 | gitlint --contrib contrib-title-conventional-commits,CC1 1: CC1 Body does not contain a 'Signed-Off-By' line 1: CL1 Title does not start with one of fix, feat, chore, docs, style, refactor, perf, test: WIP: This is the title of a commit message. # These are the default violations 1: T3 Title has trailing punctuation (.): WIP: This is the title of a commit message. 1: T5 Title contains the word 'WIP' (case-insensitive): WIP: This is the title of a commit message. 2: B4 Second line is not empty: The second line should typically be empty 3: B1 Line exceeds max length (123 80): Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. Same thing using a .gitlint file: [general] contrib=contrib-title-conventional-commits,CC1 [contrib-title-conventional-commits] # Specify allowed commit types. For details see: https://www.conventionalcommits.org/ types = bugfix,user-story,epic You can also configure contrib rules using any of the other ways to configure gitlint . Available Contrib Rules ID Name gitlint version Description CT1 contrib-title-conventional-commits = 0.12.0 Enforces Conventional Commits commit message style on the title. CC1 contrib-requires-signed-off-by = 0.12.0 Commit body must contain a Signed-Off-By line. CT1: contrib-title-conventional-commits ID Name gitlint version Description CT1 contrib-title-conventional-commits = 0.12.0 Enforces Conventional Commits commit message style on the title. Options Name gitlint version Default Description types = 0.12.0 fix,feat,chore,docs,style,refactor,perf,test,revert Comma separated list of allowed commit types. CC1: contrib-requires-signed-off-by ID Name gitlint version Description CC1 contrib-requires-signed-off-by = 0.12.0 Commit body must contain a Signed-Off-By line. This means, a line that starts with the Signed-Off-By keyword. Contributing Contrib rules We'd love for you to contribute new Contrib rules to gitlint or improve existing ones! Please visit the Contributing page on how to get started.","title":"Contrib Rules"},{"location":"contrib_rules/#using-contrib-rules","text":"Introduced in gitlint v0.12.0 Contrib rules are community- contrib uted rules that are disabled by default, but can be enabled through configuration. Contrib rules are meant to augment default gitlint behavior by providing users with rules for common use-cases without forcing these rules on all gitlint users. In addition, Contrib rules enable re-usability so that users don't have to re-implement these commonly used rules themselves as user-defined rules. To enable certain contrib rules, you can use the --contrib flag. $ cat examples/commit-message-1 | gitlint --contrib contrib-title-conventional-commits,CC1 1: CC1 Body does not contain a 'Signed-Off-By' line 1: CL1 Title does not start with one of fix, feat, chore, docs, style, refactor, perf, test: WIP: This is the title of a commit message. # These are the default violations 1: T3 Title has trailing punctuation (.): WIP: This is the title of a commit message. 1: T5 Title contains the word 'WIP' (case-insensitive): WIP: This is the title of a commit message. 2: B4 Second line is not empty: The second line should typically be empty 3: B1 Line exceeds max length (123 80): Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. Same thing using a .gitlint file: [general] contrib=contrib-title-conventional-commits,CC1 [contrib-title-conventional-commits] # Specify allowed commit types. For details see: https://www.conventionalcommits.org/ types = bugfix,user-story,epic You can also configure contrib rules using any of the other ways to configure gitlint .","title":"Using Contrib Rules"},{"location":"contrib_rules/#available-contrib-rules","text":"ID Name gitlint version Description CT1 contrib-title-conventional-commits = 0.12.0 Enforces Conventional Commits commit message style on the title. CC1 contrib-requires-signed-off-by = 0.12.0 Commit body must contain a Signed-Off-By line.","title":"Available Contrib Rules"},{"location":"contrib_rules/#ct1-contrib-title-conventional-commits","text":"ID Name gitlint version Description CT1 contrib-title-conventional-commits = 0.12.0 Enforces Conventional Commits commit message style on the title.","title":"CT1: contrib-title-conventional-commits"},{"location":"contrib_rules/#options","text":"Name gitlint version Default Description types = 0.12.0 fix,feat,chore,docs,style,refactor,perf,test,revert Comma separated list of allowed commit types.","title":"Options"},{"location":"contrib_rules/#cc1-contrib-requires-signed-off-by","text":"ID Name gitlint version Description CC1 contrib-requires-signed-off-by = 0.12.0 Commit body must contain a Signed-Off-By line. This means, a line that starts with the Signed-Off-By keyword.","title":"CC1: contrib-requires-signed-off-by"},{"location":"contrib_rules/#contributing-contrib-rules","text":"We'd love for you to contribute new Contrib rules to gitlint or improve existing ones! Please visit the Contributing page on how to get started.","title":"Contributing Contrib rules"},{"location":"contributing/","text":"Contributing We'd love for you to contribute to gitlint. Thanks for your interest! The source-code and issue tracker are hosted on Github. Often it takes a while for us (well, actually just me ) to get back to you (sometimes up to a few months, this is a hobby project), but rest assured that we read your message and appreciate your interest! We maintain a loose roadmap on our wiki , but that's open to a lot of change and input. Guidelines When contributing code, please consider all the parts that are typically required: Unit tests (automatically enforced by Travis ). Please consider writing new ones for your functionality, not only updating existing ones to make the build pass. Integration tests (also automatically enforced by Travis ). Again, please consider writing new ones for your functionality, not only updating existing ones to make the build pass. Documentation Since we want to maintain a high standard of quality, all of these things will have to be done regardless before code can make it as part of a release. If you can already include them as part of your PR, it's a huge timesaver for us and it's likely that your PR will be merged and released a lot sooner. Thanks! Development There is a Vagrantfile in this repository that can be used for development. vagrant up vagrant ssh Or you can choose to use your local environment: virtualenv .venv pip install -r requirements.txt -r test-requirements.txt -r doc-requirements.txt python setup.py develop To run tests: ./run_tests.sh # run unit tests and print test coverage ./run_test.sh gitlint/tests/test_body_rules.py::BodyRuleTests::test_body_missing # run a single test ./run_tests.sh --no-coverage # run unit tests without test coverage ./run_tests.sh --integration # Run integration tests (requires that you have gitlint installed) ./run_tests.sh --build # Run build tests (=build python package) ./run_tests.sh --pep8 # pep8 checks ./run_tests.sh --stats # print some code stats ./run_tests.sh --git # inception: run gitlint against itself ./run_tests.sh --lint # run pylint checks ./run_tests.sh --all # Run unit, integration, pep8 and gitlint checks The Vagrantfile comes with virtualenv s for python 2.7, 3.4, 3.5, 3.6, 3.7 and pypy2. You can easily run tests against specific python environments by using the following commands inside of the Vagrant VM: ./run_tests.sh --envs 27 # Run the unit tests against Python 2.7 ./run_tests.sh --envs 27,35,pypy2 # Run the unit tests against Python 2.7, Python 3.5 and Pypy2 ./run_tests.sh --envs 27,35 --pep8 # Run pep8 checks against Python 2.7 and Python 3.5 (also works for ```--git```, ```--integration```, ```--pep8```, ```--stats``` and ```--lint```). ./run_tests.sh --envs all --all # Run all tests against all environments ./run_tests.sh --all-env --all # Idem: Run all tests against all environments Important Gitlint commits and pull requests are gated on all of our tests and checks. Packaging To see the package description in HTML format pip install docutils export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8 python setup.py --long-description | rst2html.py output.html Documentation Outside the vagrant box (on your host machine): mkdocs serve Then access the documentation website on your host machine on http://localhost:8000 . Note that this is only supported for python = 2.7. Tools We keep a small set of scripts in the tools/ directory: # Create a test git repo in your /tmp directory tools/create-test-repo.sh Contrib rules Since gitlint 0.12.0, we support Contrib rules : community contributed rules that are part of gitlint itself. Thanks for considering to add a new one to gitlint! Before starting, please read all the other documentation on this page about contributing first. Then, we suggest taking the following approach to add a Contrib rule: Write your rule as a user-defined rule . In terms of code, Contrib rules are identical to user-defined rules, they just happen to have their code sit within the gitlint codebase itself. Add your user-defined rule to gitlint . You should put your file(s) in the gitlint/contrib/rules directory. Write unit tests . The gitlint codebase contains Contrib rule test files you can copy and modify . Write documentation . In particular, you should update the gitlint/docs/contrib_rules.md file with details on your Contrib rule. Contrib rule requirements If you follow the steps above and follow the existing gitlint conventions wrt naming things, you should already be fairly close to done. In case you're looking for a slightly less formal spec, here's what gitlint requires of Contrib rules. Since Contrib rules are really just user-defined rules that live withing the gitlint code-base, all the user-rule requirements also apply to Contrib rules. All contrib rules must have associated unit tests. We sort of enforce this by a unit test that verifies that there's a test file for each contrib file. All contrib rules must have names that start with contrib- . This is to easily distinguish them from default gitlint rules. All contrib rule ids must start with CT (for LineRules targeting the title), CB (for LineRules targeting the body) or CC (for CommitRules). Again, this is to easily distinguish them from default gitlint rules. All contrib rules must have unique names and ids. You can add multiple rule classes to the same file, but classes should be logically grouped together in a single file that implements related rules. Contrib rules should be meaningfully different from one another. If a behavior change or tweak can be added to an existing rule by adding options, that should be considered first. However, large god classes that implement multiple rules in a single class should obviously also be avoided. Contrib rules should use options to make rules configurable.","title":"Contributing"},{"location":"contributing/#contributing","text":"We'd love for you to contribute to gitlint. Thanks for your interest! The source-code and issue tracker are hosted on Github. Often it takes a while for us (well, actually just me ) to get back to you (sometimes up to a few months, this is a hobby project), but rest assured that we read your message and appreciate your interest! We maintain a loose roadmap on our wiki , but that's open to a lot of change and input.","title":"Contributing"},{"location":"contributing/#guidelines","text":"When contributing code, please consider all the parts that are typically required: Unit tests (automatically enforced by Travis ). Please consider writing new ones for your functionality, not only updating existing ones to make the build pass. Integration tests (also automatically enforced by Travis ). Again, please consider writing new ones for your functionality, not only updating existing ones to make the build pass. Documentation Since we want to maintain a high standard of quality, all of these things will have to be done regardless before code can make it as part of a release. If you can already include them as part of your PR, it's a huge timesaver for us and it's likely that your PR will be merged and released a lot sooner. Thanks!","title":"Guidelines"},{"location":"contributing/#development","text":"There is a Vagrantfile in this repository that can be used for development. vagrant up vagrant ssh Or you can choose to use your local environment: virtualenv .venv pip install -r requirements.txt -r test-requirements.txt -r doc-requirements.txt python setup.py develop To run tests: ./run_tests.sh # run unit tests and print test coverage ./run_test.sh gitlint/tests/test_body_rules.py::BodyRuleTests::test_body_missing # run a single test ./run_tests.sh --no-coverage # run unit tests without test coverage ./run_tests.sh --integration # Run integration tests (requires that you have gitlint installed) ./run_tests.sh --build # Run build tests (=build python package) ./run_tests.sh --pep8 # pep8 checks ./run_tests.sh --stats # print some code stats ./run_tests.sh --git # inception: run gitlint against itself ./run_tests.sh --lint # run pylint checks ./run_tests.sh --all # Run unit, integration, pep8 and gitlint checks The Vagrantfile comes with virtualenv s for python 2.7, 3.4, 3.5, 3.6, 3.7 and pypy2. You can easily run tests against specific python environments by using the following commands inside of the Vagrant VM: ./run_tests.sh --envs 27 # Run the unit tests against Python 2.7 ./run_tests.sh --envs 27,35,pypy2 # Run the unit tests against Python 2.7, Python 3.5 and Pypy2 ./run_tests.sh --envs 27,35 --pep8 # Run pep8 checks against Python 2.7 and Python 3.5 (also works for ```--git```, ```--integration```, ```--pep8```, ```--stats``` and ```--lint```). ./run_tests.sh --envs all --all # Run all tests against all environments ./run_tests.sh --all-env --all # Idem: Run all tests against all environments Important Gitlint commits and pull requests are gated on all of our tests and checks.","title":"Development"},{"location":"contributing/#packaging","text":"To see the package description in HTML format pip install docutils export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8 python setup.py --long-description | rst2html.py output.html","title":"Packaging"},{"location":"contributing/#documentation","text":"Outside the vagrant box (on your host machine): mkdocs serve Then access the documentation website on your host machine on http://localhost:8000 . Note that this is only supported for python = 2.7.","title":"Documentation"},{"location":"contributing/#tools","text":"We keep a small set of scripts in the tools/ directory: # Create a test git repo in your /tmp directory tools/create-test-repo.sh","title":"Tools"},{"location":"contributing/#contrib-rules","text":"Since gitlint 0.12.0, we support Contrib rules : community contributed rules that are part of gitlint itself. Thanks for considering to add a new one to gitlint! Before starting, please read all the other documentation on this page about contributing first. Then, we suggest taking the following approach to add a Contrib rule: Write your rule as a user-defined rule . In terms of code, Contrib rules are identical to user-defined rules, they just happen to have their code sit within the gitlint codebase itself. Add your user-defined rule to gitlint . You should put your file(s) in the gitlint/contrib/rules directory. Write unit tests . The gitlint codebase contains Contrib rule test files you can copy and modify . Write documentation . In particular, you should update the gitlint/docs/contrib_rules.md file with details on your Contrib rule.","title":"Contrib rules"},{"location":"contributing/#contrib-rule-requirements","text":"If you follow the steps above and follow the existing gitlint conventions wrt naming things, you should already be fairly close to done. In case you're looking for a slightly less formal spec, here's what gitlint requires of Contrib rules. Since Contrib rules are really just user-defined rules that live withing the gitlint code-base, all the user-rule requirements also apply to Contrib rules. All contrib rules must have associated unit tests. We sort of enforce this by a unit test that verifies that there's a test file for each contrib file. All contrib rules must have names that start with contrib- . This is to easily distinguish them from default gitlint rules. All contrib rule ids must start with CT (for LineRules targeting the title), CB (for LineRules targeting the body) or CC (for CommitRules). Again, this is to easily distinguish them from default gitlint rules. All contrib rules must have unique names and ids. You can add multiple rule classes to the same file, but classes should be logically grouped together in a single file that implements related rules. Contrib rules should be meaningfully different from one another. If a behavior change or tweak can be added to an existing rule by adding options, that should be considered first. However, large god classes that implement multiple rules in a single class should obviously also be avoided. Contrib rules should use options to make rules configurable.","title":"Contrib rule requirements"},{"location":"rules/","text":"Overview The table below shows an overview of all gitlint's built-in rules. Note that you can also write your own user-defined rule in case you don't find what you're looking for. The rest of this page contains details on the available configuration options for each built-in rule. ID Name gitlint version Description T1 title-max-length = 0.1.0 Title length must be 72 chars. T2 title-trailing-whitespace = 0.1.0 Title cannot have trailing whitespace (space or tab) T3 title-trailing-punctuation = 0.1.0 Title cannot have trailing punctuation (?:!.,;) T4 title-hard-tab = 0.1.0 Title cannot contain hard tab characters (\\t) T5 title-must-not-contain-word = 0.1.0 Title cannot contain certain words (default: \"WIP\") T6 title-leading-whitespace = 0.4.0 Title cannot have leading whitespace (space or tab) T7 title-match-regex = 0.5.0 Title must match a given regex (default: .*) B1 body-max-line-length = 0.1.0 Lines in the body must be 80 chars B2 body-trailing-whitespace = 0.1.0 Body cannot have trailing whitespace (space or tab) B3 body-hard-tab = 0.1.0 Body cannot contain hard tab characters (\\t) B4 body-first-line-empty = 0.1.0 First line of the body (second line of commit message) must be empty B5 body-min-length = 0.4.0 Body length must be at least 20 characters B6 body-is-missing = 0.4.0 Body message must be specified B7 body-changed-file-mention = 0.4.0 Body must contain references to certain files if those files are changed in the last commit M1 author-valid-email = 0.9.0 Author email address must be a valid email address I1 ignore-by-title = 0.10.0 Ignore a commit based on matching its title I2 ignore-by-body = 0.10.0 Ignore a commit based on matching its body T1: title-max-length ID Name gitlint version Description T1 title-max-length = 0.1 Title length must be 72 chars. Options Name gitlint version Default Description line-length = 0.2 72 Maximum allowed title length T2: title-trailing-whitespace ID Name gitlint version Description T2 title-trailing-whitespace = 0.1 Title cannot have trailing whitespace (space or tab) T3: title-trailing-punctuation ID Name gitlint version Description T3 title-trailing-punctuation = 0.1 Title cannot have trailing punctuation (?:!.,;) T4: title-hard-tab ID Name gitlint version Description T4 title-hard-tab = 0.1 Title cannot contain hard tab characters (\\t) T5: title-must-not-contain-word ID Name gitlint version Description T5 title-must-not-contain-word = 0.1 Title cannot contain certain words (default: \"WIP\") Options Name gitlint version Default Description words = 0.3 WIP Comma-separated list of words that should not be used in the title. Matching is case insensitive T6: title-leading-whitespace ID Name gitlint version Description T6 title-leading-whitespace = 0.4 Title cannot have leading whitespace (space or tab) T7: title-match-regex ID Name gitlint version Description T7 title-match-regex = 0.5 Title must match a given regex (default: .*) Options Name gitlint version Default Description regex = 0.5 .* Python-style regular expression that the title should match. B1: body-max-line-length ID Name gitlint version Description B1 body-max-line-length = 0.1 Lines in the body must be 80 chars Options Name gitlint version Default Description line-length = 0.2 80 Maximum allowed line length in the commit message body B2: body-trailing-whitespace ID Name gitlint version Description B2 body-trailing-whitespace = 0.1 Body cannot have trailing whitespace (space or tab) B3: body-hard-tab ID Name gitlint version Description B3 body-hard-tab = 0.1 Body cannot contain hard tab characters (\\t) B4: body-first-line-empty ID Name gitlint version Description B4 body-first-line-empty = 0.1 First line of the body (second line of commit message) must be empty B5: body-min-length ID Name gitlint version Description B5 body-min-length = 0.4 Body length must be at least 20 characters. In versions = 0.8.0, gitlint will not count newline characters. Options Name gitlint version Default Description min-length = 0.4 20 Minimum number of required characters in body B6: body-is-missing ID Name gitlint version Description B6 body-is-missing = 0.4 Body message must be specified Options Name gitlint version Default Description ignore-merge-commits = 0.4 true Whether this rule should be ignored during merge commits. Allowed values: true,false. B7: body-changed-file-mention ID Name gitlint version Description B7 body-changed-file-mention = 0.4 Body must contain references to certain files if those files are changed in the last commit Options Name gitlint version Default Description files = 0.4 (empty) Comma-separated list of files that need to an explicit mention in the commit message in case they are changed. M1: author-valid-email ID Name gitlint version Description M1 author-valid-email = 0.8.3 Author email address must be a valid email address Note Email addresses are notoriously hard to validate and the official email valid spec is often too loose for any real world application . Gitlint by default takes a pragmatic approach and requires users to enter email addresses that contain a name, domain and tld and has no spaces. Options Name gitlint version Default Description regex = 0.9.0 [^@ ]+@[^@ ]+\\.[^@ ]+ Regex the commit author email address is matched against Note An often recurring use-case is to only allow email addresses from a certain domain. The following regular expression achieves this: [^@]+@foo.com I1: ignore-by-title ID Name gitlint version Description I1 ignore-by-title = 0.10.0 Ignore a commit based on matching its title. Options Name gitlint version Default Description regex = 0.10.0 None Regex to match against commit title. On match, the commit will be ignored. ignore = 0.10.0 all Comma-seperated list of rule names or ids to ignore when this rule is matched. I2: ignore-by-body ID Name gitlint version Description I2 ignore-by-body = 0.10.0 Ignore a commit based on matching its body. Options Name gitlint version Default Description regex = 0.10.0 None Regex to match against each line of the body. On match, the commit will be ignored. ignore = 0.10.0 all Comma-seperated list of rule names or ids to ignore when this rule is matched.","title":"Rules"},{"location":"rules/#overview","text":"The table below shows an overview of all gitlint's built-in rules. Note that you can also write your own user-defined rule in case you don't find what you're looking for. The rest of this page contains details on the available configuration options for each built-in rule. ID Name gitlint version Description T1 title-max-length = 0.1.0 Title length must be 72 chars. T2 title-trailing-whitespace = 0.1.0 Title cannot have trailing whitespace (space or tab) T3 title-trailing-punctuation = 0.1.0 Title cannot have trailing punctuation (?:!.,;) T4 title-hard-tab = 0.1.0 Title cannot contain hard tab characters (\\t) T5 title-must-not-contain-word = 0.1.0 Title cannot contain certain words (default: \"WIP\") T6 title-leading-whitespace = 0.4.0 Title cannot have leading whitespace (space or tab) T7 title-match-regex = 0.5.0 Title must match a given regex (default: .*) B1 body-max-line-length = 0.1.0 Lines in the body must be 80 chars B2 body-trailing-whitespace = 0.1.0 Body cannot have trailing whitespace (space or tab) B3 body-hard-tab = 0.1.0 Body cannot contain hard tab characters (\\t) B4 body-first-line-empty = 0.1.0 First line of the body (second line of commit message) must be empty B5 body-min-length = 0.4.0 Body length must be at least 20 characters B6 body-is-missing = 0.4.0 Body message must be specified B7 body-changed-file-mention = 0.4.0 Body must contain references to certain files if those files are changed in the last commit M1 author-valid-email = 0.9.0 Author email address must be a valid email address I1 ignore-by-title = 0.10.0 Ignore a commit based on matching its title I2 ignore-by-body = 0.10.0 Ignore a commit based on matching its body","title":"Overview"},{"location":"rules/#t1-title-max-length","text":"ID Name gitlint version Description T1 title-max-length = 0.1 Title length must be 72 chars.","title":"T1: title-max-length"},{"location":"rules/#options","text":"Name gitlint version Default Description line-length = 0.2 72 Maximum allowed title length","title":"Options"},{"location":"rules/#t2-title-trailing-whitespace","text":"ID Name gitlint version Description T2 title-trailing-whitespace = 0.1 Title cannot have trailing whitespace (space or tab)","title":"T2: title-trailing-whitespace"},{"location":"rules/#t3-title-trailing-punctuation","text":"ID Name gitlint version Description T3 title-trailing-punctuation = 0.1 Title cannot have trailing punctuation (?:!.,;)","title":"T3: title-trailing-punctuation"},{"location":"rules/#t4-title-hard-tab","text":"ID Name gitlint version Description T4 title-hard-tab = 0.1 Title cannot contain hard tab characters (\\t)","title":"T4: title-hard-tab"},{"location":"rules/#t5-title-must-not-contain-word","text":"ID Name gitlint version Description T5 title-must-not-contain-word = 0.1 Title cannot contain certain words (default: \"WIP\")","title":"T5: title-must-not-contain-word"},{"location":"rules/#options_1","text":"Name gitlint version Default Description words = 0.3 WIP Comma-separated list of words that should not be used in the title. Matching is case insensitive","title":"Options"},{"location":"rules/#t6-title-leading-whitespace","text":"ID Name gitlint version Description T6 title-leading-whitespace = 0.4 Title cannot have leading whitespace (space or tab)","title":"T6: title-leading-whitespace"},{"location":"rules/#t7-title-match-regex","text":"ID Name gitlint version Description T7 title-match-regex = 0.5 Title must match a given regex (default: .*)","title":"T7: title-match-regex"},{"location":"rules/#options_2","text":"Name gitlint version Default Description regex = 0.5 .* Python-style regular expression that the title should match.","title":"Options"},{"location":"rules/#b1-body-max-line-length","text":"ID Name gitlint version Description B1 body-max-line-length = 0.1 Lines in the body must be 80 chars","title":"B1: body-max-line-length"},{"location":"rules/#options_3","text":"Name gitlint version Default Description line-length = 0.2 80 Maximum allowed line length in the commit message body","title":"Options"},{"location":"rules/#b2-body-trailing-whitespace","text":"ID Name gitlint version Description B2 body-trailing-whitespace = 0.1 Body cannot have trailing whitespace (space or tab)","title":"B2: body-trailing-whitespace"},{"location":"rules/#b3-body-hard-tab","text":"ID Name gitlint version Description B3 body-hard-tab = 0.1 Body cannot contain hard tab characters (\\t)","title":"B3: body-hard-tab"},{"location":"rules/#b4-body-first-line-empty","text":"ID Name gitlint version Description B4 body-first-line-empty = 0.1 First line of the body (second line of commit message) must be empty","title":"B4: body-first-line-empty"},{"location":"rules/#b5-body-min-length","text":"ID Name gitlint version Description B5 body-min-length = 0.4 Body length must be at least 20 characters. In versions = 0.8.0, gitlint will not count newline characters.","title":"B5: body-min-length"},{"location":"rules/#options_4","text":"Name gitlint version Default Description min-length = 0.4 20 Minimum number of required characters in body","title":"Options"},{"location":"rules/#b6-body-is-missing","text":"ID Name gitlint version Description B6 body-is-missing = 0.4 Body message must be specified","title":"B6: body-is-missing"},{"location":"rules/#options_5","text":"Name gitlint version Default Description ignore-merge-commits = 0.4 true Whether this rule should be ignored during merge commits. Allowed values: true,false.","title":"Options"},{"location":"rules/#b7-body-changed-file-mention","text":"ID Name gitlint version Description B7 body-changed-file-mention = 0.4 Body must contain references to certain files if those files are changed in the last commit","title":"B7: body-changed-file-mention"},{"location":"rules/#options_6","text":"Name gitlint version Default Description files = 0.4 (empty) Comma-separated list of files that need to an explicit mention in the commit message in case they are changed.","title":"Options"},{"location":"rules/#m1-author-valid-email","text":"ID Name gitlint version Description M1 author-valid-email = 0.8.3 Author email address must be a valid email address Note Email addresses are notoriously hard to validate and the official email valid spec is often too loose for any real world application . Gitlint by default takes a pragmatic approach and requires users to enter email addresses that contain a name, domain and tld and has no spaces.","title":"M1: author-valid-email"},{"location":"rules/#options_7","text":"Name gitlint version Default Description regex = 0.9.0 [^@ ]+@[^@ ]+\\.[^@ ]+ Regex the commit author email address is matched against Note An often recurring use-case is to only allow email addresses from a certain domain. The following regular expression achieves this: [^@]+@foo.com","title":"Options"},{"location":"rules/#i1-ignore-by-title","text":"ID Name gitlint version Description I1 ignore-by-title = 0.10.0 Ignore a commit based on matching its title.","title":"I1: ignore-by-title"},{"location":"rules/#options_8","text":"Name gitlint version Default Description regex = 0.10.0 None Regex to match against commit title. On match, the commit will be ignored. ignore = 0.10.0 all Comma-seperated list of rule names or ids to ignore when this rule is matched.","title":"Options"},{"location":"rules/#i2-ignore-by-body","text":"ID Name gitlint version Description I2 ignore-by-body = 0.10.0 Ignore a commit based on matching its body.","title":"I2: ignore-by-body"},{"location":"rules/#options_9","text":"Name gitlint version Default Description regex = 0.10.0 None Regex to match against each line of the body. On match, the commit will be ignored. ignore = 0.10.0 all Comma-seperated list of rule names or ids to ignore when this rule is matched.","title":"Options"},{"location":"user_defined_rules/","text":"User Defined Rules Introduced in gitlint v0.8.0 Gitlint supports the concept of user-defined rules: the ability for users to write their own custom rules in python. In a nutshell, use --extra-path /home/joe/myextensions to point gitlint to a myextensions directory where it will search for python files containing gitlint rule classes. You can also specify a single python module, ie --extra-path /home/joe/my_rules.py . cat examples/commit-message-1 | gitlint --extra-path examples/ 1: UC2 Body does not contain a 'Signed-Off-By Line' # Example output of a user-defined Signed-Off-By rule # other violations were removed for brevity The SignedOffBy user-defined CommitRule was discovered by gitlint when it scanned examples/gitlint/my_commit_rules.py , which is part of the examples directory that was passed via --extra-path : from gitlint.rules import CommitRule, RuleViolation class SignedOffBy(CommitRule): This rule will enforce that each commit contains a Signed-Off-By line. We keep things simple here and just check whether the commit body contains a line that starts with Signed-Off-By . # A rule MUST have a human friendly name name = body-requires-signed-off-by # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule). id = UC2 def validate(self, commit): for line in commit.message.body: if line.startswith( Signed-Off-By ): return return [RuleViolation(self.id, Body does not contain a 'Signed-Off-By' line , line_nr=1)] As always, --extra-path can also be set by adding it under the [general] section in your .gitlint file or using one of the other ways to configure gitlint . If you want to check whether your rules are properly discovered by gitlint, you can use the --debug flag: $ gitlint --debug --extra-path examples/ [output cut for brevity] UC1: body-max-line-count body-max-line-count=3 UC2: body-requires-signed-off-by UL1: title-no-special-chars special-chars=['$', '^', '%', '@', '!', '*', '(', ')'] Note In most cases it's really the easiest to just copy an example from the examples directory and modify it to your needs. The remainder of this page contains the technical details, mostly for reference. Line and Commit Rules The SignedOffBy class above was an example of a user-defined CommitRule . Commit rules are gitlint rules that act on the entire commit at once. Once the rules are discovered, gitlint will automatically take care of applying them to the entire commit. This happens exactly once per commit. A CommitRule contrasts with a LineRule (see e.g.: examples/my_line_rules.py ) in that a CommitRule is only applied once on an entire commit while a LineRule is applied for every line in the commit (you can also apply it once to the title using a target - see the examples section below). The benefit of a commit rule is that it allows commit rules to implement more complex checks that span multiple lines and/or checks that should only be done once per gitlint run. While every LineRule can be implemented as a CommitRule , it's usually easier and more concise to go with a LineRule if that fits your needs. Examples In terms of code, writing your own CommitRule or LineRule is very similar. The only 2 differences between a CommitRule and a LineRule are the parameters of the validate(...) method and the extra target attribute that LineRule requires. Consider the following CommitRule that can be found in examples/my_commit_rules.py : from gitlint.rules import CommitRule, RuleViolation class SignedOffBy(CommitRule): This rule will enforce that each commit contains a Signed-Off-By line. We keep things simple here and just check whether the commit body contains a line that starts with Signed-Off-By . # A rule MUST have a human friendly name name = body-requires-signed-off-by # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule). id = UC2 def validate(self, commit): for line in commit.message.body: if line.startswith( Signed-Off-By ): return [] return [RuleViolation(self.id, Body does not contain a 'Signed-Off-By Line' , line_nr=1)] Note the use of the name and id class attributes and the validate(...) method taking a single commit parameter. Contrast this with the following LineRule that can be found in examples/my_line_rules.py : from gitlint.rules import LineRule, RuleViolation, CommitMessageTitle from gitlint.options import ListOption class SpecialChars(LineRule): This rule will enforce that the commit message title does not contain any of the following characters: $^%@!*() # A rule MUST have a human friendly name name = title-no-special-chars # A rule MUST have an *unique* id, we recommend starting with UL (for User-defined Line-rule), but this can # really be anything. id = UL1 # A line-rule MUST have a target (not required for CommitRules). target = CommitMessageTitle # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [ListOption('special-chars', ['$', '^', '%', '@', '!', '*', '(', ')'], Comma separated list of characters that should not occur in the title )] def validate(self, line, commit): violations = [] # options can be accessed by looking them up by their name in self.options for char in self.options['special-chars'].value: if char in line: violation = RuleViolation(self.id, Title contains the special character '{}' .format(char), line) violations.append(violation) return violations Note the following 2 differences: extra target class attribute : in this example set to CommitMessageTitle indicating that this LineRule should only be applied once to the commit message title. The alternative value for target is CommitMessageBody , in which case gitlint will apply your rule to every line in the commit message body. validate(...) takes 2 parameters : Line rules get the line against which they are applied as the first parameter and the commit object of which the line is part of as second. In addition, you probably also noticed the extra options_spec class attribute which allows you to make your rules configurable. Options are not unique to LineRule s, they can also be used by CommitRule s and are further explained in the Options section below. The commit object Both CommitRule s and LineRule s take a commit object in their validate(...) methods. The table below outlines the various attributes of that commit object that can be used during validation. commit attribute Type Description commit.message object Python object representing the commit message commit.message.original string Original commit message as returned by git commit.message.full string Full commit message, with comments (lines starting with #) removed. commit.message.title string Title/subject of the commit message: the first line commit.message.body list of string List of lines in the body of the commit message (i.e. starting from the second line) commit.author_name string Name of the author, result of git log --pretty=%aN commit.author_email string Email of the author, result of git log --pretty=%aE commit.date datetime Python datetime object representing the time of commit commit.is_merge_commit boolean Boolean indicating whether the commit is a merge commit or not. commit.parents list of string List of parent commit sha s (only for merge commits). commit.changed_files list of string List of files changed in the commit (relative paths). commit.context object Object pointing to the bigger git context that the commit is part of commit.context.commits list of commit List of commits in the git context. Note that this might only be the subset of commits that gitlint is acting on, not all commits in the repo. Violations In order to let gitlint know that there is a violation in the commit being linted, users should have the validate(...) method in their rules return a list of RuleViolation s. Important The validate(...) method doesn't always need to return a list, you can just skip the return statement in case there are no violations. However, in case of a single violation, validate should return a list with a single item. The RuleViolation class has the following generic signature: RuleViolation(rule_id, message, content=None, line_nr=None): With the parameters meaning the following: Parameter Type Description rule_id string Rule's unique string id message string Short description of the violation content string (optional) the violating part of commit or line line_nr int (optional) line number in the commit message where the violation occurs. Automatically set to the correct line number for LineRule s if not set explicitly. A typical validate(...) implementation for a CommitRule would then be as follows: def validate(self, commit) for line_nr, line in commit.message.body: if Jon Snow in line: # we add 1 to the line_nr because we offset the title which is on the first line return [RuleViolation(self.id, Commit message has the words 'Jon Snow' in it , line, line_nr + 1)] return [] The parameters of this RuleViolation can be directly mapped onto gitlint's output as follows: Options In order to make your own rules configurable, you can add an optional options_spec attribute to your rule class (supported for both LineRule and CommitRule ). from gitlint.rules import CommitRule, RuleViolation from gitlint.options import IntOption class BodyMaxLineCount(CommitRule): # A rule MUST have a human friendly name name = body-max-line-count # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule). id = UC1 # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [IntOption('max-line-count', 3, Maximum body line count )] def validate(self, commit): line_count = len(commit.message.body) max_line_count = self.options['max-line-count'].value if line_count max_line_count: message = Body contains too many lines ({0} {1}) .format(line_count, max_line_count) return [RuleViolation(self.id, message, line_nr=1)] By using options_spec , you make your option available to be configured through a .gitlint file or one of the other ways to configure gitlint . Gitlint automatically takes care of the parsing and input validation. For example, to change the value of the max-line-count option, add the following to your .gitlint file: [body-max-line-count] body-max-line-count=1 As options_spec is a list, you can obviously have multiple options per rule. The general signature of an option is: Option(name, default_value, description) . Gitlint supports a variety of different option types, all can be imported from gitlint.options : Option Class Use for StrOption Strings IntOption Integers. IntOption takes an optional allow_negative parameter if you want to allow negative integers. BoolOption Booleans. Valid values: true, false. Case-insensitive. ListOption List of strings. Comma separated. PathOption Directory or file path. Takes an optional type parameter for specifying path type ( file , dir (=default) or both ). Note Gitlint currently does not support options for all possible types (e.g. float, filepath, list of int, etc). We could use a hand getting those implemented ! Rule requirements As long as you stick with simple rules that are similar to the sample user-defined rules (see the examples directory), gitlint should be able to discover and execute them. While clearly you can run any python code you want in your rules, you might run into some issues if you don't follow the conventions that gitlint requires. While the rule finding source-code is the ultimate source of truth, here are some of the requirements that gitlint enforces: Rule class requirements Rules must extend from LineRule or CommitRule Rule classes must have id and name string attributes. The options_spec is optional, but if set, it must be a list of gitlint Options. Rule classes must have a validate method. In case of a CommitRule , validate must take a single commit parameter. In case of LineRule , validate must take line and commit as first and second parameters. LineRule classes must have a target class attributes that is set to either CommitMessageTitle or CommitMessageBody . User Rule id's cannot start with R , T , B or M as these rule ids are reserved for gitlint itself. Rules should have a case-insensitive unique id as only one rule can exist with a given id. While gitlint does not enforce this, having multiple rules with the same id might lead to unexpected or undeterministic behavior. extra-path requirements If extra-path is a directory, it does not need to be a proper python package, i.e. it doesn't require an __init__.py file. Python files containing user-defined rules must have a .py extension. Files with a different extension will be ignored. The extra-path will be searched non-recursively, i.e. all rule classes must be present at the top level extra-path directory. User rule classes must be defined in the modules that are part of extra-path , rules that are imported from outside the extra-path will be ignored.","title":"User Defined Rules"},{"location":"user_defined_rules/#user-defined-rules","text":"Introduced in gitlint v0.8.0 Gitlint supports the concept of user-defined rules: the ability for users to write their own custom rules in python. In a nutshell, use --extra-path /home/joe/myextensions to point gitlint to a myextensions directory where it will search for python files containing gitlint rule classes. You can also specify a single python module, ie --extra-path /home/joe/my_rules.py . cat examples/commit-message-1 | gitlint --extra-path examples/ 1: UC2 Body does not contain a 'Signed-Off-By Line' # Example output of a user-defined Signed-Off-By rule # other violations were removed for brevity The SignedOffBy user-defined CommitRule was discovered by gitlint when it scanned examples/gitlint/my_commit_rules.py , which is part of the examples directory that was passed via --extra-path : from gitlint.rules import CommitRule, RuleViolation class SignedOffBy(CommitRule): This rule will enforce that each commit contains a Signed-Off-By line. We keep things simple here and just check whether the commit body contains a line that starts with Signed-Off-By . # A rule MUST have a human friendly name name = body-requires-signed-off-by # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule). id = UC2 def validate(self, commit): for line in commit.message.body: if line.startswith( Signed-Off-By ): return return [RuleViolation(self.id, Body does not contain a 'Signed-Off-By' line , line_nr=1)] As always, --extra-path can also be set by adding it under the [general] section in your .gitlint file or using one of the other ways to configure gitlint . If you want to check whether your rules are properly discovered by gitlint, you can use the --debug flag: $ gitlint --debug --extra-path examples/ [output cut for brevity] UC1: body-max-line-count body-max-line-count=3 UC2: body-requires-signed-off-by UL1: title-no-special-chars special-chars=['$', '^', '%', '@', '!', '*', '(', ')'] Note In most cases it's really the easiest to just copy an example from the examples directory and modify it to your needs. The remainder of this page contains the technical details, mostly for reference.","title":"User Defined Rules"},{"location":"user_defined_rules/#line-and-commit-rules","text":"The SignedOffBy class above was an example of a user-defined CommitRule . Commit rules are gitlint rules that act on the entire commit at once. Once the rules are discovered, gitlint will automatically take care of applying them to the entire commit. This happens exactly once per commit. A CommitRule contrasts with a LineRule (see e.g.: examples/my_line_rules.py ) in that a CommitRule is only applied once on an entire commit while a LineRule is applied for every line in the commit (you can also apply it once to the title using a target - see the examples section below). The benefit of a commit rule is that it allows commit rules to implement more complex checks that span multiple lines and/or checks that should only be done once per gitlint run. While every LineRule can be implemented as a CommitRule , it's usually easier and more concise to go with a LineRule if that fits your needs.","title":"Line and Commit Rules"},{"location":"user_defined_rules/#examples","text":"In terms of code, writing your own CommitRule or LineRule is very similar. The only 2 differences between a CommitRule and a LineRule are the parameters of the validate(...) method and the extra target attribute that LineRule requires. Consider the following CommitRule that can be found in examples/my_commit_rules.py : from gitlint.rules import CommitRule, RuleViolation class SignedOffBy(CommitRule): This rule will enforce that each commit contains a Signed-Off-By line. We keep things simple here and just check whether the commit body contains a line that starts with Signed-Off-By . # A rule MUST have a human friendly name name = body-requires-signed-off-by # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule). id = UC2 def validate(self, commit): for line in commit.message.body: if line.startswith( Signed-Off-By ): return [] return [RuleViolation(self.id, Body does not contain a 'Signed-Off-By Line' , line_nr=1)] Note the use of the name and id class attributes and the validate(...) method taking a single commit parameter. Contrast this with the following LineRule that can be found in examples/my_line_rules.py : from gitlint.rules import LineRule, RuleViolation, CommitMessageTitle from gitlint.options import ListOption class SpecialChars(LineRule): This rule will enforce that the commit message title does not contain any of the following characters: $^%@!*() # A rule MUST have a human friendly name name = title-no-special-chars # A rule MUST have an *unique* id, we recommend starting with UL (for User-defined Line-rule), but this can # really be anything. id = UL1 # A line-rule MUST have a target (not required for CommitRules). target = CommitMessageTitle # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [ListOption('special-chars', ['$', '^', '%', '@', '!', '*', '(', ')'], Comma separated list of characters that should not occur in the title )] def validate(self, line, commit): violations = [] # options can be accessed by looking them up by their name in self.options for char in self.options['special-chars'].value: if char in line: violation = RuleViolation(self.id, Title contains the special character '{}' .format(char), line) violations.append(violation) return violations Note the following 2 differences: extra target class attribute : in this example set to CommitMessageTitle indicating that this LineRule should only be applied once to the commit message title. The alternative value for target is CommitMessageBody , in which case gitlint will apply your rule to every line in the commit message body. validate(...) takes 2 parameters : Line rules get the line against which they are applied as the first parameter and the commit object of which the line is part of as second. In addition, you probably also noticed the extra options_spec class attribute which allows you to make your rules configurable. Options are not unique to LineRule s, they can also be used by CommitRule s and are further explained in the Options section below.","title":"Examples"},{"location":"user_defined_rules/#the-commit-object","text":"Both CommitRule s and LineRule s take a commit object in their validate(...) methods. The table below outlines the various attributes of that commit object that can be used during validation. commit attribute Type Description commit.message object Python object representing the commit message commit.message.original string Original commit message as returned by git commit.message.full string Full commit message, with comments (lines starting with #) removed. commit.message.title string Title/subject of the commit message: the first line commit.message.body list of string List of lines in the body of the commit message (i.e. starting from the second line) commit.author_name string Name of the author, result of git log --pretty=%aN commit.author_email string Email of the author, result of git log --pretty=%aE commit.date datetime Python datetime object representing the time of commit commit.is_merge_commit boolean Boolean indicating whether the commit is a merge commit or not. commit.parents list of string List of parent commit sha s (only for merge commits). commit.changed_files list of string List of files changed in the commit (relative paths). commit.context object Object pointing to the bigger git context that the commit is part of commit.context.commits list of commit List of commits in the git context. Note that this might only be the subset of commits that gitlint is acting on, not all commits in the repo.","title":"The commit object"},{"location":"user_defined_rules/#violations","text":"In order to let gitlint know that there is a violation in the commit being linted, users should have the validate(...) method in their rules return a list of RuleViolation s. Important The validate(...) method doesn't always need to return a list, you can just skip the return statement in case there are no violations. However, in case of a single violation, validate should return a list with a single item. The RuleViolation class has the following generic signature: RuleViolation(rule_id, message, content=None, line_nr=None): With the parameters meaning the following: Parameter Type Description rule_id string Rule's unique string id message string Short description of the violation content string (optional) the violating part of commit or line line_nr int (optional) line number in the commit message where the violation occurs. Automatically set to the correct line number for LineRule s if not set explicitly. A typical validate(...) implementation for a CommitRule would then be as follows: def validate(self, commit) for line_nr, line in commit.message.body: if Jon Snow in line: # we add 1 to the line_nr because we offset the title which is on the first line return [RuleViolation(self.id, Commit message has the words 'Jon Snow' in it , line, line_nr + 1)] return [] The parameters of this RuleViolation can be directly mapped onto gitlint's output as follows:","title":"Violations"},{"location":"user_defined_rules/#options","text":"In order to make your own rules configurable, you can add an optional options_spec attribute to your rule class (supported for both LineRule and CommitRule ). from gitlint.rules import CommitRule, RuleViolation from gitlint.options import IntOption class BodyMaxLineCount(CommitRule): # A rule MUST have a human friendly name name = body-max-line-count # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule). id = UC1 # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [IntOption('max-line-count', 3, Maximum body line count )] def validate(self, commit): line_count = len(commit.message.body) max_line_count = self.options['max-line-count'].value if line_count max_line_count: message = Body contains too many lines ({0} {1}) .format(line_count, max_line_count) return [RuleViolation(self.id, message, line_nr=1)] By using options_spec , you make your option available to be configured through a .gitlint file or one of the other ways to configure gitlint . Gitlint automatically takes care of the parsing and input validation. For example, to change the value of the max-line-count option, add the following to your .gitlint file: [body-max-line-count] body-max-line-count=1 As options_spec is a list, you can obviously have multiple options per rule. The general signature of an option is: Option(name, default_value, description) . Gitlint supports a variety of different option types, all can be imported from gitlint.options : Option Class Use for StrOption Strings IntOption Integers. IntOption takes an optional allow_negative parameter if you want to allow negative integers. BoolOption Booleans. Valid values: true, false. Case-insensitive. ListOption List of strings. Comma separated. PathOption Directory or file path. Takes an optional type parameter for specifying path type ( file , dir (=default) or both ). Note Gitlint currently does not support options for all possible types (e.g. float, filepath, list of int, etc). We could use a hand getting those implemented !","title":"Options"},{"location":"user_defined_rules/#rule-requirements","text":"As long as you stick with simple rules that are similar to the sample user-defined rules (see the examples directory), gitlint should be able to discover and execute them. While clearly you can run any python code you want in your rules, you might run into some issues if you don't follow the conventions that gitlint requires. While the rule finding source-code is the ultimate source of truth, here are some of the requirements that gitlint enforces:","title":"Rule requirements"},{"location":"user_defined_rules/#rule-class-requirements","text":"Rules must extend from LineRule or CommitRule Rule classes must have id and name string attributes. The options_spec is optional, but if set, it must be a list of gitlint Options. Rule classes must have a validate method. In case of a CommitRule , validate must take a single commit parameter. In case of LineRule , validate must take line and commit as first and second parameters. LineRule classes must have a target class attributes that is set to either CommitMessageTitle or CommitMessageBody . User Rule id's cannot start with R , T , B or M as these rule ids are reserved for gitlint itself. Rules should have a case-insensitive unique id as only one rule can exist with a given id. While gitlint does not enforce this, having multiple rules with the same id might lead to unexpected or undeterministic behavior.","title":"Rule class requirements"},{"location":"user_defined_rules/#extra-path-requirements","text":"If extra-path is a directory, it does not need to be a proper python package, i.e. it doesn't require an __init__.py file. Python files containing user-defined rules must have a .py extension. Files with a different extension will be ignored. The extra-path will be searched non-recursively, i.e. all rule classes must be present at the top level extra-path directory. User rule classes must be defined in the modules that are part of extra-path , rules that are imported from outside the extra-path will be ignored.","title":"extra-path requirements"}]}