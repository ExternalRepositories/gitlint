{
    "docs": [
        {
            "location": "/", 
            "text": "Intro\n\n\nGitlint is a git commit message linter written in python: it checks your commit messages for style.\n\n\nGreat for use as a \ncommit-msg\n git hook or as part of your gating script in a CI/CD pipeline (e.g. jenkins).\n\n\n\n\n\n\n\nNote\n\n\nGitlint is not the only git commit message linter out there, if you are looking for an alternative written in a different language,\nhave a look at \nfit-commit\n (Ruby) or\n\nnode-commit-msg\n (Node.js).\n\n\n\n\nFeatures\n\n\n\n\nCommit message hook\n: \nAuto-trigger validations against new commit message right when you're committing\n.\n\n\nEasily integrated\n: Gitlint will validate any git commit message you give it via standard input.\n   Perfect for \nintegration with your own scripts or CI system\n.\n\n\nSane defaults:\n Many of gitlint's validations are based on\n\nwell-known\n,\n\ncommunity\n,\n\nstandards\n, others are based on checks that we've found\nuseful throughout the years.\n\n\nEasily configurable:\n Gitlint has sane defaults, but \nyou can also easily customize it to your own liking\n.\n\n\nUser-defined Rules:\n Want to do more then what gitlint offers out of the box? Write your own \nuser defined rules\n.\n\n\nBroad python version support:\n Gitlint supports python versions 2.6, 2.7, 3.3+ and PyPy2.\n\n\nFull unicode support:\n Lint your Russian, Chinese or Emoji commit messages with ease!\n\n\nProduction-ready:\n Gitlint checks a lot of the boxes you're looking for: high unit test coverage, integration tests,\n   python code standards (pep8, pylint), good documentation, proven track record.\n\n\n\n\nGetting Started\n\n\n# Install gitlint\npip install gitlint\n\n# Check the last commit message\ngitlint\n# Alternatively, pipe a commit message to gitlint:\ncat examples/commit-message-1 | gitlint\n# or\ngit log -1 --pretty=%B | gitlint\n\n# To install a gitlint as a commit-msg git hook:\ngitlint install-hook\n\n\n\n\nOutput example:\n\n\n$ cat examples/commit-message-2 | gitlint\n1: T1 Title exceeds max length (134\n80): \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T2 Title has trailing whitespace: \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T4 Title contains hard tab characters (\\t): \nThis is the title of a commit message that  is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n2: B4 Second line is not empty: \nThis line should not contain text\n\n3: B1 Line exceeds max length (125\n80): \nLines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n3: B2 Line has trailing whitespace: \nLines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n3: B3 Line contains hard tab characters (\\t): \nLines typically need to have     a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n\n\n\n\n\n\nNote\n\n\nThe returned exit code equals the number of errors found. \nSome exit codes are special\n.\n\n\n\n\nFor a list of available rules and their configuration options, have a look at the \nRules\n page.\n\n\nThe \nConfiguration\n page explains how you can modify gitlint's runtime behavior via command-line\nflags, a \n.gitlint\n configuration file or on a per commit basis.\n\n\nAs a simple example, you can modify gitlint's verbosity using the \n-v\n flag, like so:\n\n\n$ cat examples/commit-message-2 | gitlint -v\n1: T1\n1: T2\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vv\n1: T1 Title exceeds max length (134\n80)\n1: T2 Title has trailing whitespace\n1: T4 Title contains hard tab characters (\\t)\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vvv\n1: T1 Title exceeds max length (134\n80): \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T2 Title has trailing whitespace: \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n[removed output]\n\n\n\n\nThe default verbosity is \n-vvv\n.\n\n\nOther commands and variations:\n\n\nUsage: gitlint [OPTIONS] COMMAND [ARGS]...\n\n  Git lint tool, checks your git commit messages for styling issues\n\nOptions:\n  --target DIRECTORY     Path of the target git repository. [default: current\n                         working directory]\n  -C, --config PATH      Config file location [default: .gitlint]\n  -c TEXT                Config flags in format \nrule\n.\noption\n=\nvalue\n (e.g.:\n                         -c T1.line-length=80). Flag can be used multiple\n                         times to set multiple config values.\n  --commits TEXT         The range of commits to lint. [default: HEAD]\n  -e, --extra-path PATH  Path to a directory or python module with extra user-\n                         defined rules\n  --ignore TEXT          Ignore rules (comma-separated by id or name).\n  -v, --verbose          Verbosity, more v's for more verbose output (e.g.:\n                         -v, -vv, -vvv). [default: -vvv]\n  -s, --silent           Silent mode (no output). Takes precedence over -v,\n                         -vv, -vvv.\n  -d, --debug            Enable debugging output.\n  --version              Show the version and exit.\n  --help                 Show this message and exit.\n\nCommands:\n  generate-config  Generates a sample gitlint config file.\n  install-hook     Install gitlint as a git commit-msg hook.\n  lint             Lints a git repository [default command]\n  uninstall-hook   Uninstall gitlint commit-msg hook.\n\n  When no COMMAND is specified, gitlint defaults to 'gitlint lint'.\n\n\n\n\nUsing gitlint as a commit-msg hook\n\n\nIntroduced in gitlint v0.4.0\n\n\nYou can also install gitlint as a git \ncommit-msg\n hook so that gitlint checks your commit messages automatically\nafter each commit.\n\n\ngitlint install-hook\n# To remove the hook\ngitlint uninstall-hook\n\n\n\n\n\n\nImportant\n\n\nGitlint cannot work together with an existing hook. If you already have a \n.git/hooks/commit-msg\n\nfile in your local repository, gitlint will refuse to install the \ncommit-msg\n hook. Gitlint will also only\nuninstall unmodified commit-msg hooks that were installed by gitlint.\n\n\n\n\nUsing gitlint in a CI/CD script\n\n\nBy default, when just running \ngitlint\n without additional parameters, gitlint lint the last commit in the current\ngit repository.\n\n\nThis makes it easy to add gitlint to a check script that is run in a CI environment. In fact, this is exactly what we\ndo ourselves: on every commit,\n\nwe run gitlint as part of our travisCI tests\n.\nThis will cause the build to fail when we submit a bad commit message.\n\n\nGitlint will also lint any commit message that you feed it via stdin like so:\n\n\n# lint the last commit message\ngit log -1 --pretty=%B | gitlint\n# lint a specific commit: 62c0519\ngit log -1 --pretty=%B 62c0519 | gitlint\n\n\n\n\nFor now, it's required that you specify \n--pretty=%B\n (=only print the log message, not the metadata),\nfuture versions of gitlint might fix this.\n\n\nLinting a range of commits\n\n\nExperimental support introduced in gitlint v0.8.1, known issues:\n\n\n#23\n\n\nGitlint allows users to commit a number of commits at once like so:\n\n\n# Lint a specific commit range:\ngitlint --commits 019cf40...d6bc75a\n# You can also use git's special references:\ngitlint --commits origin..HEAD\n# Or specify a single specific commit:\ngitlint --commits 6f29bf81a8322a04071bb794666e48c443a90360\n\n\n\n\nThe \n--commits\n flag takes a \nsingle\n refspec argument or commit range. Basically, any range that is understood\nby \ngit rev-list\n as a single argument will work.\n\n\nPrior to v0.8.1 gitlint didn't support this feature. However, older versions of gitlint can still lint a range or set\nof commits at once by creating a simple bash script that pipes the commit messages one by one into gitlint. This\napproach can still be used with newer versions of gitlint in case \n--commits\n doesn't provide the flexibility you\nare looking for.\n\n\n#!/bin/bash\n\nfor commit in $(git rev-list master); do\n    commit_msg=$(git log -1 --pretty=%B $commit)\n    echo \n$commit\n\n    echo \n$commit_msg\n | gitlint\n    echo \n--------\n\ndone\n\n\n\n\n\n\nNote\n\n\nOne downside to this approach is that you invoke gitlint once per commit vs. once per set of commits.\nThis means you'll incur the gitlint startup time once per commit, making this approach rather slow if you want to\nlint a large set of commits. Always use \n--commits\n if you can to avoid this performance penalty.\n\n\n\n\nMerge commits\n\n\nIntroduced in gitlint v0.7.0\n\n\nGitlint ignores merge commits by default. The rationale behind this is that in many cases\nmerge commits are not created by users themselves but by tools such as github,\n\ngerrit\n and others. These tools often generate merge commit messages that\nviolate gitlint's set of rules and it's not always convenient or desired to change those.\n\n\nIn case you \ndo\n want to lint merge commit messages, you can disable this behavior by setting the\ngeneral \nignore-merge-commits\n option to \nfalse\n\n\nusing one of the various ways to configure gitlint\n.\n\n\nExit codes\n\n\nGitlint uses the exit code as a simple way to indicate the number of violations found.\nSome exit codes are used to indicate special errors as indicated in the table below.\n\n\nBecause of these special error codes and the fact that\n\nbash only supports exit codes between 0 and 255\n, the maximum number\nof violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations\nit can detect, it will just always return with exit code 252 when the number of violations is greater than or equal\nto 252.\n\n\n\n\n\n\n\n\nExit Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n253\n\n\nWrong invocation of the \ngitlint\n command.\n\n\n\n\n\n\n254\n\n\nSomething went wrong when invoking git.\n\n\n\n\n\n\n255\n\n\nInvalid gitlint configuration", 
            "title": "Home"
        }, 
        {
            "location": "/#intro", 
            "text": "Gitlint is a git commit message linter written in python: it checks your commit messages for style.  Great for use as a  commit-msg  git hook or as part of your gating script in a CI/CD pipeline (e.g. jenkins).    Note  Gitlint is not the only git commit message linter out there, if you are looking for an alternative written in a different language,\nhave a look at  fit-commit  (Ruby) or node-commit-msg  (Node.js).", 
            "title": "Intro"
        }, 
        {
            "location": "/#features", 
            "text": "Commit message hook :  Auto-trigger validations against new commit message right when you're committing .  Easily integrated : Gitlint will validate any git commit message you give it via standard input.\n   Perfect for  integration with your own scripts or CI system .  Sane defaults:  Many of gitlint's validations are based on well-known , community , standards , others are based on checks that we've found\nuseful throughout the years.  Easily configurable:  Gitlint has sane defaults, but  you can also easily customize it to your own liking .  User-defined Rules:  Want to do more then what gitlint offers out of the box? Write your own  user defined rules .  Broad python version support:  Gitlint supports python versions 2.6, 2.7, 3.3+ and PyPy2.  Full unicode support:  Lint your Russian, Chinese or Emoji commit messages with ease!  Production-ready:  Gitlint checks a lot of the boxes you're looking for: high unit test coverage, integration tests,\n   python code standards (pep8, pylint), good documentation, proven track record.", 
            "title": "Features"
        }, 
        {
            "location": "/#getting-started", 
            "text": "# Install gitlint\npip install gitlint\n\n# Check the last commit message\ngitlint\n# Alternatively, pipe a commit message to gitlint:\ncat examples/commit-message-1 | gitlint\n# or\ngit log -1 --pretty=%B | gitlint\n\n# To install a gitlint as a commit-msg git hook:\ngitlint install-hook  Output example:  $ cat examples/commit-message-2 | gitlint\n1: T1 Title exceeds max length (134 80):  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T2 Title has trailing whitespace:  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T4 Title contains hard tab characters (\\t):  This is the title of a commit message that  is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n2: B4 Second line is not empty:  This line should not contain text \n3: B1 Line exceeds max length (125 80):  Lines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.  \n3: B2 Line has trailing whitespace:  Lines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.  \n3: B3 Line contains hard tab characters (\\t):  Lines typically need to have     a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.     Note  The returned exit code equals the number of errors found.  Some exit codes are special .   For a list of available rules and their configuration options, have a look at the  Rules  page.  The  Configuration  page explains how you can modify gitlint's runtime behavior via command-line\nflags, a  .gitlint  configuration file or on a per commit basis.  As a simple example, you can modify gitlint's verbosity using the  -v  flag, like so:  $ cat examples/commit-message-2 | gitlint -v\n1: T1\n1: T2\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vv\n1: T1 Title exceeds max length (134 80)\n1: T2 Title has trailing whitespace\n1: T4 Title contains hard tab characters (\\t)\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vvv\n1: T1 Title exceeds max length (134 80):  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T2 Title has trailing whitespace:  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n[removed output]  The default verbosity is  -vvv .  Other commands and variations:  Usage: gitlint [OPTIONS] COMMAND [ARGS]...\n\n  Git lint tool, checks your git commit messages for styling issues\n\nOptions:\n  --target DIRECTORY     Path of the target git repository. [default: current\n                         working directory]\n  -C, --config PATH      Config file location [default: .gitlint]\n  -c TEXT                Config flags in format  rule . option = value  (e.g.:\n                         -c T1.line-length=80). Flag can be used multiple\n                         times to set multiple config values.\n  --commits TEXT         The range of commits to lint. [default: HEAD]\n  -e, --extra-path PATH  Path to a directory or python module with extra user-\n                         defined rules\n  --ignore TEXT          Ignore rules (comma-separated by id or name).\n  -v, --verbose          Verbosity, more v's for more verbose output (e.g.:\n                         -v, -vv, -vvv). [default: -vvv]\n  -s, --silent           Silent mode (no output). Takes precedence over -v,\n                         -vv, -vvv.\n  -d, --debug            Enable debugging output.\n  --version              Show the version and exit.\n  --help                 Show this message and exit.\n\nCommands:\n  generate-config  Generates a sample gitlint config file.\n  install-hook     Install gitlint as a git commit-msg hook.\n  lint             Lints a git repository [default command]\n  uninstall-hook   Uninstall gitlint commit-msg hook.\n\n  When no COMMAND is specified, gitlint defaults to 'gitlint lint'.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#using-gitlint-as-a-commit-msg-hook", 
            "text": "Introduced in gitlint v0.4.0  You can also install gitlint as a git  commit-msg  hook so that gitlint checks your commit messages automatically\nafter each commit.  gitlint install-hook\n# To remove the hook\ngitlint uninstall-hook   Important  Gitlint cannot work together with an existing hook. If you already have a  .git/hooks/commit-msg \nfile in your local repository, gitlint will refuse to install the  commit-msg  hook. Gitlint will also only\nuninstall unmodified commit-msg hooks that were installed by gitlint.", 
            "title": "Using gitlint as a commit-msg hook"
        }, 
        {
            "location": "/#using-gitlint-in-a-cicd-script", 
            "text": "By default, when just running  gitlint  without additional parameters, gitlint lint the last commit in the current\ngit repository.  This makes it easy to add gitlint to a check script that is run in a CI environment. In fact, this is exactly what we\ndo ourselves: on every commit, we run gitlint as part of our travisCI tests .\nThis will cause the build to fail when we submit a bad commit message.  Gitlint will also lint any commit message that you feed it via stdin like so:  # lint the last commit message\ngit log -1 --pretty=%B | gitlint\n# lint a specific commit: 62c0519\ngit log -1 --pretty=%B 62c0519 | gitlint  For now, it's required that you specify  --pretty=%B  (=only print the log message, not the metadata),\nfuture versions of gitlint might fix this.", 
            "title": "Using gitlint in a CI/CD script"
        }, 
        {
            "location": "/#linting-a-range-of-commits", 
            "text": "Experimental support introduced in gitlint v0.8.1, known issues:  #23  Gitlint allows users to commit a number of commits at once like so:  # Lint a specific commit range:\ngitlint --commits 019cf40...d6bc75a\n# You can also use git's special references:\ngitlint --commits origin..HEAD\n# Or specify a single specific commit:\ngitlint --commits 6f29bf81a8322a04071bb794666e48c443a90360  The  --commits  flag takes a  single  refspec argument or commit range. Basically, any range that is understood\nby  git rev-list  as a single argument will work.  Prior to v0.8.1 gitlint didn't support this feature. However, older versions of gitlint can still lint a range or set\nof commits at once by creating a simple bash script that pipes the commit messages one by one into gitlint. This\napproach can still be used with newer versions of gitlint in case  --commits  doesn't provide the flexibility you\nare looking for.  #!/bin/bash\n\nfor commit in $(git rev-list master); do\n    commit_msg=$(git log -1 --pretty=%B $commit)\n    echo  $commit \n    echo  $commit_msg  | gitlint\n    echo  -------- \ndone   Note  One downside to this approach is that you invoke gitlint once per commit vs. once per set of commits.\nThis means you'll incur the gitlint startup time once per commit, making this approach rather slow if you want to\nlint a large set of commits. Always use  --commits  if you can to avoid this performance penalty.", 
            "title": "Linting a range of commits"
        }, 
        {
            "location": "/#merge-commits", 
            "text": "Introduced in gitlint v0.7.0  Gitlint ignores merge commits by default. The rationale behind this is that in many cases\nmerge commits are not created by users themselves but by tools such as github, gerrit  and others. These tools often generate merge commit messages that\nviolate gitlint's set of rules and it's not always convenient or desired to change those.  In case you  do  want to lint merge commit messages, you can disable this behavior by setting the\ngeneral  ignore-merge-commits  option to  false  using one of the various ways to configure gitlint .", 
            "title": "Merge commits"
        }, 
        {
            "location": "/#exit-codes", 
            "text": "Gitlint uses the exit code as a simple way to indicate the number of violations found.\nSome exit codes are used to indicate special errors as indicated in the table below.  Because of these special error codes and the fact that bash only supports exit codes between 0 and 255 , the maximum number\nof violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations\nit can detect, it will just always return with exit code 252 when the number of violations is greater than or equal\nto 252.     Exit Code  Description      253  Wrong invocation of the  gitlint  command.    254  Something went wrong when invoking git.    255  Invalid gitlint configuration", 
            "title": "Exit codes"
        }, 
        {
            "location": "/configuration/", 
            "text": "Config files\n\n\nYou can modify gitlint's behavior by adding a \n.gitlint\n file to your git repository.\n\n\nGenerate a default \n.gitlint\n config file by running:\n\n\ngitlint generate-config\n\n\n\n\nYou can also use a different config file like so:\n\n\ngitlint --config myconfigfile.ini \n\n\n\n\nThe block below shows a sample \n.gitlint\n file. Details about rule config options can be found on the\n\nRules\n page, details about the \n[general]\n section can be found in the\n\nGeneral Configuration\n section of this page.\n\n\n# All these sections are optional, edit this file as you like.\n[general]\nignore=title-trailing-punctuation, T3\n# verbosity should be a value between 1 and 3, the commandline -v flags take precedence over this\nverbosity = 2\n# By default gitlint will ignore merge commits. Set to 'false' to disable.\nignore-merge-commits=true\n\n# Set the extra-path where gitlint will search for user defined rules\n# See http://jorisroovers.github.io/gitlint/user_defined_rules for details\n# extra-path=examples/\n\n[title-max-length]\nline-length=20\n\n[title-must-not-contain-word]\n# Comma-separated list of words that should not occur in the title. Matching is case\n# insensitive. It's fine if the keyword occurs as part of a larger word (so \nWIPING\n\n# will not cause a violation, but \nWIP: my title\n will.\nwords=wip,title\n\n[title-match-regex]\n# python like regex (https://docs.python.org/2/library/re.html) that the\n# commit-msg title must be matched to.\n# Note that the regex can contradict with other rules if not used correctly\n# (e.g. title-must-not-contain-word).\nregex=^US[0-9]*\n\n[B1]\n# B1 = body-max-line-length\nline-length=30\n\n[body-min-length]\nmin-length=5\n\n[body-is-missing]\n# Whether to ignore this rule on merge commits (which typically only have a title)\n# default = True\nignore-merge-commits=false\n\n[body-changed-file-mention]\n# List of files that need to be explicitly mentioned in the body when they are changed\n# This is useful for when developers often erroneously edit certain files or git submodules.\n# By specifying this rule, developers can only change the file when they explicitly reference\n# it in the commit message.\nfiles=gitlint/rules.py,README.md\n\n\n\n\nCommandline config\n\n\nYou can also use one or more \n-c\n flags like so:\n\n\n$ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100\n\n\n\n\nThe generic config flag format is \n-c \nrule\n.\noption\n=\nvalue\n and supports all the same rules and options which \nyou can also use in a \n.gitlint\n config file.\n\n\nCommit specific config\n\n\nYou can also disable gitlint for specific commit messages by adding \ngitlint-ignore: all\n to the commit\nmessage like so:\n\n\nWIP: This is my commit message\n\nI want gitlint to ignore this entire commit message.\ngitlint-ignore: all\n\n\n\n\ngitlint-ignore: all\n can occur on any line, as long as it is at the start of the line. You can also specify\nspecific rules to be ignored as follows: \ngitlint-ignore: T1, body-hard-tab\n.\n\n\nConfiguration precedence\n\n\ngitlint configuration is applied in the following order of precedence:\n\n\n\n\nCommit specific config (e.g.: \ngitlint-ignore: all\n in the commit message) \n\n\nCommandline convenience flags (e.g.:  \n-vv\n, \n--silent\n, \n--ignore\n)\n\n\nCommandline configuration flags (e.g.: \n-c title-max-length=123\n)\n\n\nConfiguration file (local \n.gitlint\n file, or file specified using \n-C\n/\n--config\n)\n\n\nDefault gitlint config\n\n\n\n\nGeneral configuration\n\n\nThe table below outlines configuration options that modify gitlint's overall behavior. These options can be specified\nusing commandline flags or in \ngeneral\n section in a \n.gitlint\n configuration file.\n\n\n\n\n\n\n\n\nName\n\n\nDefault value\n\n\ngitlint version\n\n\ncommandline flag\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsilent\n\n\nfalse\n\n\n= 0.1\n\n\n--silent\n\n\nEnable silent mode (no output). Use \nexit\n code to determine result.\n\n\n\n\n\n\nverbosity\n\n\n3\n\n\n= 0.1\n\n\n--verbosity=3\n\n\nAmount of output gitlint will show when printing errors.\n\n\n\n\n\n\nignore-merge-commits\n\n\ntrue\n\n\n= 0.7.0\n\n\nNot available\n\n\nWhether or not to ignore merge commits.\n\n\n\n\n\n\nignore\n\n\n[] (=empty)\n\n\n= 0.1\n\n\n--ignore=T1,body-min-length\n\n\nComma seperated list of rules to ignore (by name or id)\n\n\n\n\n\n\ndebug\n\n\nfalse\n\n\n= 0.7.1\n\n\n--debug\n\n\nEnable debugging output\n\n\n\n\n\n\ntarget\n\n\n(empty)\n\n\n= 0.8.0\n\n\n---target=/home/joe/myrepo/\n\n\nTarget git repository gitlint should be linting against.\n\n\n\n\n\n\nextra-path\n\n\n(empty)\n\n\n= 0.8.0\n\n\n---extra-path=/home/joe/rules/\n\n\nPath where gitlint looks for \nuser-defined rules\n.", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#config-files", 
            "text": "You can modify gitlint's behavior by adding a  .gitlint  file to your git repository.  Generate a default  .gitlint  config file by running:  gitlint generate-config  You can also use a different config file like so:  gitlint --config myconfigfile.ini   The block below shows a sample  .gitlint  file. Details about rule config options can be found on the Rules  page, details about the  [general]  section can be found in the General Configuration  section of this page.  # All these sections are optional, edit this file as you like.\n[general]\nignore=title-trailing-punctuation, T3\n# verbosity should be a value between 1 and 3, the commandline -v flags take precedence over this\nverbosity = 2\n# By default gitlint will ignore merge commits. Set to 'false' to disable.\nignore-merge-commits=true\n\n# Set the extra-path where gitlint will search for user defined rules\n# See http://jorisroovers.github.io/gitlint/user_defined_rules for details\n# extra-path=examples/\n\n[title-max-length]\nline-length=20\n\n[title-must-not-contain-word]\n# Comma-separated list of words that should not occur in the title. Matching is case\n# insensitive. It's fine if the keyword occurs as part of a larger word (so  WIPING \n# will not cause a violation, but  WIP: my title  will.\nwords=wip,title\n\n[title-match-regex]\n# python like regex (https://docs.python.org/2/library/re.html) that the\n# commit-msg title must be matched to.\n# Note that the regex can contradict with other rules if not used correctly\n# (e.g. title-must-not-contain-word).\nregex=^US[0-9]*\n\n[B1]\n# B1 = body-max-line-length\nline-length=30\n\n[body-min-length]\nmin-length=5\n\n[body-is-missing]\n# Whether to ignore this rule on merge commits (which typically only have a title)\n# default = True\nignore-merge-commits=false\n\n[body-changed-file-mention]\n# List of files that need to be explicitly mentioned in the body when they are changed\n# This is useful for when developers often erroneously edit certain files or git submodules.\n# By specifying this rule, developers can only change the file when they explicitly reference\n# it in the commit message.\nfiles=gitlint/rules.py,README.md", 
            "title": "Config files"
        }, 
        {
            "location": "/configuration/#commandline-config", 
            "text": "You can also use one or more  -c  flags like so:  $ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100  The generic config flag format is  -c  rule . option = value  and supports all the same rules and options which \nyou can also use in a  .gitlint  config file.", 
            "title": "Commandline config"
        }, 
        {
            "location": "/configuration/#commit-specific-config", 
            "text": "You can also disable gitlint for specific commit messages by adding  gitlint-ignore: all  to the commit\nmessage like so:  WIP: This is my commit message\n\nI want gitlint to ignore this entire commit message.\ngitlint-ignore: all  gitlint-ignore: all  can occur on any line, as long as it is at the start of the line. You can also specify\nspecific rules to be ignored as follows:  gitlint-ignore: T1, body-hard-tab .", 
            "title": "Commit specific config"
        }, 
        {
            "location": "/configuration/#configuration-precedence", 
            "text": "gitlint configuration is applied in the following order of precedence:   Commit specific config (e.g.:  gitlint-ignore: all  in the commit message)   Commandline convenience flags (e.g.:   -vv ,  --silent ,  --ignore )  Commandline configuration flags (e.g.:  -c title-max-length=123 )  Configuration file (local  .gitlint  file, or file specified using  -C / --config )  Default gitlint config", 
            "title": "Configuration precedence"
        }, 
        {
            "location": "/configuration/#general-configuration", 
            "text": "The table below outlines configuration options that modify gitlint's overall behavior. These options can be specified\nusing commandline flags or in  general  section in a  .gitlint  configuration file.     Name  Default value  gitlint version  commandline flag  Description      silent  false  = 0.1  --silent  Enable silent mode (no output). Use  exit  code to determine result.    verbosity  3  = 0.1  --verbosity=3  Amount of output gitlint will show when printing errors.    ignore-merge-commits  true  = 0.7.0  Not available  Whether or not to ignore merge commits.    ignore  [] (=empty)  = 0.1  --ignore=T1,body-min-length  Comma seperated list of rules to ignore (by name or id)    debug  false  = 0.7.1  --debug  Enable debugging output    target  (empty)  = 0.8.0  ---target=/home/joe/myrepo/  Target git repository gitlint should be linting against.    extra-path  (empty)  = 0.8.0  ---extra-path=/home/joe/rules/  Path where gitlint looks for  user-defined rules .", 
            "title": "General configuration"
        }, 
        {
            "location": "/rules/", 
            "text": "Overview\n\n\nThe table below shows an overview of all gitlint's built-in rules.\nNote that you can also \nwrite your own user-defined rule\n in case you don't find\nwhat you're looking for.\nThe rest of this page contains details on the available configuration options for each built-in rule.\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT1\n\n\ntitle-max-length\n\n\n= 0.1\n\n\nTitle length must be \n 72 chars.\n\n\n\n\n\n\nT2\n\n\ntitle-trailing-whitespace\n\n\n= 0.1\n\n\nTitle cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\nT3\n\n\ntitle-trailing-punctuation\n\n\n= 0.1\n\n\nTitle cannot have trailing punctuation (?:!.,;)\n\n\n\n\n\n\nT4\n\n\ntitle-hard-tab\n\n\n= 0.1\n\n\nTitle cannot contain hard tab characters (\\t)\n\n\n\n\n\n\nT5\n\n\ntitle-must-not-contain-word\n\n\n= 0.1\n\n\nTitle cannot contain certain words (default: \"WIP\")\n\n\n\n\n\n\nT6\n\n\ntitle-leading-whitespace\n\n\n= 0.4\n\n\nTitle cannot have leading whitespace (space or tab)\n\n\n\n\n\n\nT7\n\n\ntitle-match-regex\n\n\n= 0.5\n\n\nTitle must match a given regex (default: .*)\n\n\n\n\n\n\nB1\n\n\nbody-max-line-length\n\n\n= 0.1\n\n\nLines in the body must be \n 80 chars\n\n\n\n\n\n\nB2\n\n\nbody-trailing-whitespace\n\n\n= 0.1\n\n\nBody cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\nB3\n\n\nbody-hard-tab\n\n\n= 0.1\n\n\nBody cannot contain hard tab characters (\\t)\n\n\n\n\n\n\nB4\n\n\nbody-first-line-empty\n\n\n= 0.1\n\n\nFirst line of the body (second line of commit message) must be empty\n\n\n\n\n\n\nB5\n\n\nbody-min-length\n\n\n= 0.4\n\n\nBody length must be at least 20 characters\n\n\n\n\n\n\nB6\n\n\nbody-is-missing\n\n\n= 0.4\n\n\nBody message must be specified\n\n\n\n\n\n\nB7\n\n\nbody-changed-file-mention\n\n\n= 0.4\n\n\nBody must contain references to certain files if those files are changed in the last commit\n\n\n\n\n\n\n\n\nT1: title-max-length\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT1\n\n\ntitle-max-length\n\n\n= 0.1\n\n\nTitle length must be \n 72 chars.\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nline-length\n\n\n= 0.2\n\n\n72\n\n\nMaximum allowed title length\n\n\n\n\n\n\n\n\nT2: title-trailing-whitespace\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT2\n\n\ntitle-trailing-whitespace\n\n\n= 0.1\n\n\nTitle cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\n\n\nT3: title-trailing-punctuation\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT3\n\n\ntitle-trailing-punctuation\n\n\n= 0.1\n\n\nTitle cannot have trailing punctuation (?:!.,;)\n\n\n\n\n\n\n\n\nT4: title-hard-tab\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT4\n\n\ntitle-hard-tab\n\n\n= 0.1\n\n\nTitle cannot contain hard tab characters (\\t)\n\n\n\n\n\n\n\n\nT5: title-must-not-contain-word\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT5\n\n\ntitle-must-not-contain-word\n\n\n= 0.1\n\n\nTitle cannot contain certain words (default: \"WIP\")\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwords\n\n\n= 0.3\n\n\nWIP\n\n\nComma-separated list of words that should not be used in the title. Matching is case insensitive\n\n\n\n\n\n\n\n\nT6: title-leading-whitespace\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT6\n\n\ntitle-leading-whitespace\n\n\n= 0.4\n\n\nTitle cannot have leading whitespace (space or tab)\n\n\n\n\n\n\n\n\nT7: title-match-regex\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT7\n\n\ntitle-match-regex\n\n\n= 0.5\n\n\nTitle must match a given regex (default: .*)\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregex\n\n\n= 0.5\n\n\n.*\n\n\nPython-style regular expression\n that the title should match.\n\n\n\n\n\n\n\n\nB1: body-max-line-length\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB1\n\n\nbody-max-line-length\n\n\n= 0.1\n\n\nLines in the body must be \n 80 chars\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nline-length\n\n\n= 0.2\n\n\n80\n\n\nMaximum allowed line length in the commit message body\n\n\n\n\n\n\n\n\nB2: body-trailing-whitespace\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB2\n\n\nbody-trailing-whitespace\n\n\n= 0.1\n\n\nBody cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\n\n\nB3: body-hard-tab\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB3\n\n\nbody-hard-tab\n\n\n= 0.1\n\n\nBody cannot contain hard tab characters (\\t)\n\n\n\n\n\n\n\n\nB4: body-first-line-empty\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB4\n\n\nbody-first-line-empty\n\n\n= 0.1\n\n\nFirst line of the body (second line of commit message) must be empty\n\n\n\n\n\n\n\n\nB5: body-min-length\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB5\n\n\nbody-min-length\n\n\n= 0.4\n\n\nBody length must be at least 20 characters. In versions \n= 0.8.0, gitlint will not count newline characters.\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmin-length\n\n\n= 0.4\n\n\n20\n\n\nMinimum number of required characters in body\n\n\n\n\n\n\n\n\nB6: body-is-missing\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB6\n\n\nbody-is-missing\n\n\n= 0.4\n\n\nBody message must be specified\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nignore-merge-commits\n\n\n= 0.4\n\n\ntrue\n\n\nWhether this rule should be ignored during merge commits. Allowed values: true,false.\n\n\n\n\n\n\n\n\nB7: body-changed-file-mention\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB7\n\n\nbody-changed-file-mention\n\n\n= 0.4\n\n\nBody must contain references to certain files if those files are changed in the last commit\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfiles\n\n\n= 0.4\n\n\n(empty)\n\n\nComma-separated list of files that need to an explicit mention in the commit message in case they are changed.", 
            "title": "Rules"
        }, 
        {
            "location": "/rules/#overview", 
            "text": "The table below shows an overview of all gitlint's built-in rules.\nNote that you can also  write your own user-defined rule  in case you don't find\nwhat you're looking for.\nThe rest of this page contains details on the available configuration options for each built-in rule.     ID  Name  gitlint version  Description      T1  title-max-length  = 0.1  Title length must be   72 chars.    T2  title-trailing-whitespace  = 0.1  Title cannot have trailing whitespace (space or tab)    T3  title-trailing-punctuation  = 0.1  Title cannot have trailing punctuation (?:!.,;)    T4  title-hard-tab  = 0.1  Title cannot contain hard tab characters (\\t)    T5  title-must-not-contain-word  = 0.1  Title cannot contain certain words (default: \"WIP\")    T6  title-leading-whitespace  = 0.4  Title cannot have leading whitespace (space or tab)    T7  title-match-regex  = 0.5  Title must match a given regex (default: .*)    B1  body-max-line-length  = 0.1  Lines in the body must be   80 chars    B2  body-trailing-whitespace  = 0.1  Body cannot have trailing whitespace (space or tab)    B3  body-hard-tab  = 0.1  Body cannot contain hard tab characters (\\t)    B4  body-first-line-empty  = 0.1  First line of the body (second line of commit message) must be empty    B5  body-min-length  = 0.4  Body length must be at least 20 characters    B6  body-is-missing  = 0.4  Body message must be specified    B7  body-changed-file-mention  = 0.4  Body must contain references to certain files if those files are changed in the last commit", 
            "title": "Overview"
        }, 
        {
            "location": "/rules/#t1-title-max-length", 
            "text": "ID  Name  gitlint version  Description      T1  title-max-length  = 0.1  Title length must be   72 chars.", 
            "title": "T1: title-max-length"
        }, 
        {
            "location": "/rules/#options", 
            "text": "Name  gitlint version  Default  Description      line-length  = 0.2  72  Maximum allowed title length", 
            "title": "Options"
        }, 
        {
            "location": "/rules/#t2-title-trailing-whitespace", 
            "text": "ID  Name  gitlint version  Description      T2  title-trailing-whitespace  = 0.1  Title cannot have trailing whitespace (space or tab)", 
            "title": "T2: title-trailing-whitespace"
        }, 
        {
            "location": "/rules/#t3-title-trailing-punctuation", 
            "text": "ID  Name  gitlint version  Description      T3  title-trailing-punctuation  = 0.1  Title cannot have trailing punctuation (?:!.,;)", 
            "title": "T3: title-trailing-punctuation"
        }, 
        {
            "location": "/rules/#t4-title-hard-tab", 
            "text": "ID  Name  gitlint version  Description      T4  title-hard-tab  = 0.1  Title cannot contain hard tab characters (\\t)", 
            "title": "T4: title-hard-tab"
        }, 
        {
            "location": "/rules/#t5-title-must-not-contain-word", 
            "text": "ID  Name  gitlint version  Description      T5  title-must-not-contain-word  = 0.1  Title cannot contain certain words (default: \"WIP\")", 
            "title": "T5: title-must-not-contain-word"
        }, 
        {
            "location": "/rules/#options_1", 
            "text": "Name  gitlint version  Default  Description      words  = 0.3  WIP  Comma-separated list of words that should not be used in the title. Matching is case insensitive", 
            "title": "Options"
        }, 
        {
            "location": "/rules/#t6-title-leading-whitespace", 
            "text": "ID  Name  gitlint version  Description      T6  title-leading-whitespace  = 0.4  Title cannot have leading whitespace (space or tab)", 
            "title": "T6: title-leading-whitespace"
        }, 
        {
            "location": "/rules/#t7-title-match-regex", 
            "text": "ID  Name  gitlint version  Description      T7  title-match-regex  = 0.5  Title must match a given regex (default: .*)", 
            "title": "T7: title-match-regex"
        }, 
        {
            "location": "/rules/#options_2", 
            "text": "Name  gitlint version  Default  Description      regex  = 0.5  .*  Python-style regular expression  that the title should match.", 
            "title": "Options"
        }, 
        {
            "location": "/rules/#b1-body-max-line-length", 
            "text": "ID  Name  gitlint version  Description      B1  body-max-line-length  = 0.1  Lines in the body must be   80 chars", 
            "title": "B1: body-max-line-length"
        }, 
        {
            "location": "/rules/#options_3", 
            "text": "Name  gitlint version  Default  Description      line-length  = 0.2  80  Maximum allowed line length in the commit message body", 
            "title": "Options"
        }, 
        {
            "location": "/rules/#b2-body-trailing-whitespace", 
            "text": "ID  Name  gitlint version  Description      B2  body-trailing-whitespace  = 0.1  Body cannot have trailing whitespace (space or tab)", 
            "title": "B2: body-trailing-whitespace"
        }, 
        {
            "location": "/rules/#b3-body-hard-tab", 
            "text": "ID  Name  gitlint version  Description      B3  body-hard-tab  = 0.1  Body cannot contain hard tab characters (\\t)", 
            "title": "B3: body-hard-tab"
        }, 
        {
            "location": "/rules/#b4-body-first-line-empty", 
            "text": "ID  Name  gitlint version  Description      B4  body-first-line-empty  = 0.1  First line of the body (second line of commit message) must be empty", 
            "title": "B4: body-first-line-empty"
        }, 
        {
            "location": "/rules/#b5-body-min-length", 
            "text": "ID  Name  gitlint version  Description      B5  body-min-length  = 0.4  Body length must be at least 20 characters. In versions  = 0.8.0, gitlint will not count newline characters.", 
            "title": "B5: body-min-length"
        }, 
        {
            "location": "/rules/#options_4", 
            "text": "Name  gitlint version  Default  Description      min-length  = 0.4  20  Minimum number of required characters in body", 
            "title": "Options"
        }, 
        {
            "location": "/rules/#b6-body-is-missing", 
            "text": "ID  Name  gitlint version  Description      B6  body-is-missing  = 0.4  Body message must be specified", 
            "title": "B6: body-is-missing"
        }, 
        {
            "location": "/rules/#options_5", 
            "text": "Name  gitlint version  Default  Description      ignore-merge-commits  = 0.4  true  Whether this rule should be ignored during merge commits. Allowed values: true,false.", 
            "title": "Options"
        }, 
        {
            "location": "/rules/#b7-body-changed-file-mention", 
            "text": "ID  Name  gitlint version  Description      B7  body-changed-file-mention  = 0.4  Body must contain references to certain files if those files are changed in the last commit", 
            "title": "B7: body-changed-file-mention"
        }, 
        {
            "location": "/rules/#options_6", 
            "text": "Name  gitlint version  Default  Description      files  = 0.4  (empty)  Comma-separated list of files that need to an explicit mention in the commit message in case they are changed.", 
            "title": "Options"
        }, 
        {
            "location": "/user_defined_rules/", 
            "text": "User Defined Rules\n\n\nIntroduced in gitlint v0.8.0\n\n\nGitlint supports the concept of user-defined rules: the ability for users to write their own custom rules in python.\n\n\nIn a nutshell, use \n--extra-path /home/joe/myextensions\n to point gitlint to a \nmyextensions\n directory where it will search\nfor python files containing gitlint rule classes. You can also specify a single python module, ie\n\n--extra-path /home/joe/my_rules.py\n.\n\n\ncat examples/commit-message-1 | gitlint --extra-path examples/\n1: UC2 Body does not contain a 'Signed-Off-By Line' # Example output of a user-defined Signed-Off-By rule\n# other violations were removed for brevity\n\n\n\n\nThe SignedOffBy user-defined \nCommitRule\n was discovered by gitlint when it scanned\n\nexamples/gitlint/my_commit_rules.py\n,\nwhich is part of the examples directory that was passed via \n--extra-path\n:\n\n\nfrom gitlint.rules import CommitRule, RuleViolation\n\nclass SignedOffBy(CommitRule):\n    \n This rule will enforce that each commit contains a \nSigned-Off-By\n line.\n    We keep things simple here and just check whether the commit body contains a line that starts with \nSigned-Off-By\n.\n    \n\n\n    # A rule MUST have a human friendly name\n    name = \nbody-requires-signed-off-by\n\n\n    # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule).\n    id = \nUC2\n\n\n    def validate(self, commit):\n        for line in commit.message.body:\n            if line.startswith(\nSigned-Off-By\n):\n                return\n\n        return [RuleViolation(self.id, \nBody does not contain a 'Signed-Off-By' line\n, line_nr=1)]\n\n\n\n\nAs always, \n--extra-path\n can also be set by adding it under the \n[general]\n section in your \n.gitlint\n file or using\n\none of the other ways to configure gitlint\n.\n\n\nIf you want to check whether your rules are properly discovered by gitlint, you can use the \n--debug\n flag:\n\n\n$ gitlint --debug --extra-path examples/\n[output cut for brevity]\n  UC1: body-max-line-count\n     body-max-line-count=3\n  UC2: body-requires-signed-off-by\n  UL1: title-no-special-chars\n     special-chars=['$', '^', '%', '@', '!', '*', '(', ')']\n\n\n\n\n\n\nNote\n\n\nIn most cases it's really the easiest to just copy an example from the\n\nexamples\n directory and modify it to your needs.\nThe remainder of this page contains the technical details, mostly for reference.\n\n\n\n\nLine and Commit Rules\n\n\nThe \nSignedOffBy\n class above was an example of a user-defined \nCommitRule\n. Commit rules are gitlint rules that\nact on the entire commit at once. Once the rules are discovered, gitlint will automatically take care of applying them\nto the entire commit. This happens exactly once per commit.\n\n\nA \nCommitRule\n contrasts with a \nLineRule\n\n(see e.g.: \nexamples/my_line_rules.py\n)\nin that a \nCommitRule\n is only applied once on an entire commit while a \nLineRule\n is applied for every line in the commit\n(you can also apply it once to the title using a \ntarget\n - see the examples section below).\n\n\nThe benefit of a commit rule is that it allows commit rules to implement more complex checks that span multiple lines and/or checks\nthat should only be done once per gitlint run.\n\n\nWhile every \nLineRule\n can be implemented as a \nCommitRule\n, it's usually easier and more concise to go with a \nLineRule\n if\nthat fits your needs.\n\n\nExamples\n\n\nIn terms of code, writing your own \nCommitRule\n or \nLineRule\n is very similar.\nThe only 2 differences between a \nCommitRule\n and a \nLineRule\n are the parameters of the \nvalidate(...)\n method and the extra\n\ntarget\n attribute that \nLineRule\n requires.\n\n\nConsider the following \nCommitRule\n that can be found in \nexamples/my_commit_rules.py\n:\n\n\nfrom gitlint.rules import CommitRule, RuleViolation\n\nclass SignedOffBy(CommitRule):\n    \n This rule will enforce that each commit contains a \nSigned-Off-By\n line.\n    We keep things simple here and just check whether the commit body contains a line that starts with \nSigned-Off-By\n.\n    \n\n\n    # A rule MUST have a human friendly name\n    name = \nbody-requires-signed-off-by\n\n\n    # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule).\n    id = \nUC2\n\n\n    def validate(self, commit):\n        for line in commit.message.body:\n            if line.startswith(\nSigned-Off-By\n):\n                return []\n\n        return [RuleViolation(self.id, \nBody does not contain a 'Signed-Off-By Line'\n, line_nr=1)]\n\n\n\n\nNote the use of the \nname\n and \nid\n class attributes and the \nvalidate(...)\n method taking a single \ncommit\n parameter.\n\n\nContrast this with the following \nLineRule\n that can be found in \nexamples/my_line_rules.py\n:\n\n\nfrom gitlint.rules import LineRule, RuleViolation, CommitMessageTitle\nfrom gitlint.options import ListOption\n\nclass SpecialChars(LineRule):\n    \n This rule will enforce that the commit message title does not contain any of the following characters:\n        $^%@!*() \n\n\n    # A rule MUST have a human friendly name\n    name = \ntitle-no-special-chars\n\n\n    # A rule MUST have an *unique* id, we recommend starting with UL (for User-defined Line-rule), but this can\n    # really be anything.\n    id = \nUL1\n\n\n    # A line-rule MUST have a target (not required for CommitRules).\n    target = CommitMessageTitle\n\n    # A rule MAY have an option_spec if its behavior should be configurable.\n    options_spec = [ListOption('special-chars', ['$', '^', '%', '@', '!', '*', '(', ')'],\n                               \nComma separated list of characters that should not occur in the title\n)]\n\n    def validate(self, line, commit):\n        violations = []\n        # options can be accessed by looking them up by their name in self.options\n        for char in self.options['special-chars'].value:\n            if char in line:\n                violation = RuleViolation(self.id, \nTitle contains the special character '{}'\n.format(char), line)\n                violations.append(violation)\n\n        return violations\n\n\n\n\nNote the following 2 differences:\n\n\n\n\nextra \ntarget\n class attribute\n: in this example set to \nCommitMessageTitle\n  indicating that this \nLineRule\n\nshould only be applied once to the commit message title. The alternative value for \ntarget\n is \nCommitMessageBody\n,\n in which case gitlint will apply\nyour rule to every line in the commit message body.\n\n\nvalidate(...)\n takes 2 parameters\n: Line rules get the \nline\n against which they are applied as the first parameter and\nthe \ncommit\n object of which the line is part of as second.\n\n\n\n\nIn addition, you probably also noticed the extra \noptions_spec\n class attribute which allows you to make your rules configurable.\nOptions are not unique to \nLineRule\ns, they can also be used by \nCommitRule\ns and are further explained in the\n\nOptions\n section below.\n\n\nThe commit object\n\n\nBoth \nCommitRule\ns and \nLineRule\ns take a \ncommit\n object in their \nvalidate(...)\n methods.\nThe table below outlines the various attributes of that commit object that can be used during validation.\n\n\n\n\n\n\n\n\ncommit attribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncommit.message\n\n\nobject\n\n\nPython object representing the commit message\n\n\n\n\n\n\ncommit.message.original\n\n\nstring\n\n\nOriginal commit message as returned by git\n\n\n\n\n\n\ncommit.message.full\n\n\nstring\n\n\nFull commit message, with comments (lines starting with #) removed.\n\n\n\n\n\n\ncommit.message.title\n\n\nstring\n\n\nTitle/subject of the commit message: the first line\n\n\n\n\n\n\ncommit.message.body\n\n\nlist of string\n\n\nList of lines in the body of the commit message (i.e. starting from the second line)\n\n\n\n\n\n\ncommit.author_name\n\n\nstring\n\n\nName of the author, result of \ngit log --pretty=%aN\n\n\n\n\n\n\ncommit.author_email\n\n\nstring\n\n\nEmail of the author, result of \ngit log --pretty=%aE\n\n\n\n\n\n\ncommit.date\n\n\ndatetime\n\n\nPython \ndatetime\n object representing the time of commit\n\n\n\n\n\n\ncommit.is_merge_commit\n\n\nboolean\n\n\nBoolean indicating whether the commit is a merge commit or not.\n\n\n\n\n\n\ncommit.parents\n\n\nlist of string\n\n\nList of parent commit \nsha\ns (only for merge commits).\n\n\n\n\n\n\ncommit.changed_files\n\n\nlist of string\n\n\nList of files changed in the commit (relative paths).\n\n\n\n\n\n\ncommit.context\n\n\nobject\n\n\nObject pointing to the bigger git context that the commit is part of\n\n\n\n\n\n\ncommit.context.commits\n\n\nlist of commit\n\n\nList of commits in the git context. Note that this might only be the subset of commits that gitlint is acting on, not all commits in the repo.\n\n\n\n\n\n\n\n\nViolations\n\n\nIn order to let gitlint know that there is a violation in the commit being linted, users should have the \nvalidate(...)\n\nmethod in their rules return a list of \nRuleViolation\ns.\n\n\n\n\nImportant\n\n\nThe \nvalidate(...)\n method doesn't always need to return a list, you can just skip the return statement in case there are no violations.\nHowever, in case of a single violation, validate should return a \nlist\n with a single item.\n\n\n\n\nThe \nRuleViolation\n class has the following generic signature:\n\n\nRuleViolation(rule_id, message, content=None, line_nr=None):\n\n\n\n\nWith the parameters meaning the following:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrule_id\n\n\nstring\n\n\nRule's unique string id\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\nShort description of the violation\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\n(optional) the violating part of commit or line\n\n\n\n\n\n\nline_nr\n\n\nint\n\n\n(optional) line number in the commit message where the violation occurs. \nAutomatically set to the correct line number for \nLineRule\ns if not set explicitly.\n\n\n\n\n\n\n\n\nA typical \nvalidate(...)\n implementation for a \nCommitRule\n would then be as follows:\n\n\ndef validate(self, commit)\n    for line_nr, line in commit.message.body:\n        if \nJon Snow\n in line:\n            # we add 1 to the line_nr because we offset the title which is on the first line\n            return [RuleViolation(self.id, \nCommit message has the words 'Jon Snow' in it\n, line, line_nr + 1)]\n    return []\n\n\n\n\nThe parameters of this \nRuleViolation\n can be directly mapped onto gitlint's output as follows:\n\n\n\n\nOptions\n\n\nIn order to make your own rules configurable, you can add an optional \noptions_spec\n attribute to your rule class\n(supported for both \nLineRule\n and \nCommitRule\n).\n\n\nfrom gitlint.rules import CommitRule, RuleViolation\nfrom gitlint.options import IntOption\n\nclass BodyMaxLineCount(CommitRule):\n    # A rule MUST have a human friendly name\n    name = \nbody-max-line-count\n\n\n    # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule).\n    id = \nUC1\n\n\n    # A rule MAY have an option_spec if its behavior should be configurable.\n    options_spec = [IntOption('max-line-count', 3, \nMaximum body line count\n)]\n\n    def validate(self, commit):\n        line_count = len(commit.message.body)\n        max_line_count = self.options['max-line-count'].value\n        if line_count \n max_line_count:\n            message = \nBody contains too many lines ({0} \n {1})\n.format(line_count, max_line_count)\n            return [RuleViolation(self.id, message, line_nr=1)]\n\n\n\n\nBy using \noptions_spec\n, you make your option available to be configured through a \n.gitlint\n file\nor one of the \nother ways to configure gitlint\n. Gitlint automatically takes care of the parsing and input validation.\n\n\nFor example, to change the value of the \nmax-line-count\n option, add the following to your \n.gitlint\n file:\n\n\n[body-max-line-count]\nbody-max-line-count=1\n\n\n\n\nAs \noptions_spec\n is a list, you can obviously have multiple options per rule. The general signature of an option is:\n\nOption(name, default_value, description)\n.\n\n\nGitlint supports a variety of different option types, all can be imported from \ngitlint.options\n:\n\n\n\n\n\n\n\n\nOption Class\n\n\nUse for\n\n\n\n\n\n\n\n\n\n\nStrOption\n\n\nStrings\n\n\n\n\n\n\nIntOption\n\n\nIntegers. \nIntOption\n takes an optional \nallow_negative\n parameter if you want to allow negative integers.\n\n\n\n\n\n\nBoolOption\n\n\nBooleans. Valid values: true, false. Case-insensitive.\n\n\n\n\n\n\nListOption\n\n\nList of strings. Comma separated.\n\n\n\n\n\n\nPathOption\n\n\nDirectory or file path. Takes an optional \ntype\n parameter for specifying path type (\nfile\n, \ndir\n (=default) or \nboth\n).\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nGitlint currently does not support options for all possible types (e.g. float, filepath, list of int, etc).\n\nWe could use a hand getting those implemented\n!\n\n\n\n\nRule requirements\n\n\nAs long as you stick with simple rules that are similar to the sample user-defined rules (see the\n\nexamples\n directory), gitlint\nshould be able to discover and execute them. While clearly you can run any python code you want in your rules,\nyou might run into some issues if you don't follow the conventions that gitlint requires.\n\n\nWhile the \nrule finding source-code\n is the\nultimate source of truth, here are some of the requirements that gitlint enforces:\n\n\nRule class requirements\n\n\n\n\nRules \nmust\n extend from  \nLineRule\n or \nCommitRule\n\n\nRule classes \nmust\n have \nid\n and \nname\n string attributes. The \noptions_spec\n is optional,\n  but if set, it \nmust\n be a list of gitlint Options.\n\n\nRule classes \nmust\n have a \nvalidate\n method. In case of a \nCommitRule\n, \nvalidate\n  \nmust\n take a single \ncommit\n parameter.\n  In case of \nLineRule\n, \nvalidate\n \nmust\n take \nline\n and \ncommit\n as first and second parameters.\n\n\nLineRule classes \nmust\n have a \ntarget\n class attributes that is set to either \nCommitMessageTitle\n or \nCommitMessageBody\n.\n\n\nUser Rule id's \ncannot\n start with \nR\n, \nT\n, \nB\n or \nM\n as these rule ids are reserved for gitlint itself.\n\n\nRules \nshould\n have a case-insensitive unique id as only one rule can exist with a given id. While gitlint does not enforce this, having multiple rules with\n  the same id might lead to unexpected or undeterministic behavior.\n\n\n\n\nextra-path requirements\n\n\n\n\nIf  \nextra-path\n is a directory, it does \nnot\n need to be a proper python package, i.e. it doesn't require an \n__init__.py\n file.\n\n\nPython files containing user-defined rules must have a \n.py\n extension. Files with a different extension will be ignored.\n\n\nThe \nextra-path\n will be searched non-recursively, i.e. all rule classes must be present at the top level \nextra-path\n directory.\n\n\nUser rule classes must be defined in the modules that are part of \nextra-path\n, rules that are imported from outside the \nextra-path\n will be ignored.", 
            "title": "User Defined Rules"
        }, 
        {
            "location": "/user_defined_rules/#user-defined-rules", 
            "text": "Introduced in gitlint v0.8.0  Gitlint supports the concept of user-defined rules: the ability for users to write their own custom rules in python.  In a nutshell, use  --extra-path /home/joe/myextensions  to point gitlint to a  myextensions  directory where it will search\nfor python files containing gitlint rule classes. You can also specify a single python module, ie --extra-path /home/joe/my_rules.py .  cat examples/commit-message-1 | gitlint --extra-path examples/\n1: UC2 Body does not contain a 'Signed-Off-By Line' # Example output of a user-defined Signed-Off-By rule\n# other violations were removed for brevity  The SignedOffBy user-defined  CommitRule  was discovered by gitlint when it scanned examples/gitlint/my_commit_rules.py ,\nwhich is part of the examples directory that was passed via  --extra-path :  from gitlint.rules import CommitRule, RuleViolation\n\nclass SignedOffBy(CommitRule):\n      This rule will enforce that each commit contains a  Signed-Off-By  line.\n    We keep things simple here and just check whether the commit body contains a line that starts with  Signed-Off-By .\n     \n\n    # A rule MUST have a human friendly name\n    name =  body-requires-signed-off-by \n\n    # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule).\n    id =  UC2 \n\n    def validate(self, commit):\n        for line in commit.message.body:\n            if line.startswith( Signed-Off-By ):\n                return\n\n        return [RuleViolation(self.id,  Body does not contain a 'Signed-Off-By' line , line_nr=1)]  As always,  --extra-path  can also be set by adding it under the  [general]  section in your  .gitlint  file or using one of the other ways to configure gitlint .  If you want to check whether your rules are properly discovered by gitlint, you can use the  --debug  flag:  $ gitlint --debug --extra-path examples/\n[output cut for brevity]\n  UC1: body-max-line-count\n     body-max-line-count=3\n  UC2: body-requires-signed-off-by\n  UL1: title-no-special-chars\n     special-chars=['$', '^', '%', '@', '!', '*', '(', ')']   Note  In most cases it's really the easiest to just copy an example from the examples  directory and modify it to your needs.\nThe remainder of this page contains the technical details, mostly for reference.", 
            "title": "User Defined Rules"
        }, 
        {
            "location": "/user_defined_rules/#line-and-commit-rules", 
            "text": "The  SignedOffBy  class above was an example of a user-defined  CommitRule . Commit rules are gitlint rules that\nact on the entire commit at once. Once the rules are discovered, gitlint will automatically take care of applying them\nto the entire commit. This happens exactly once per commit.  A  CommitRule  contrasts with a  LineRule \n(see e.g.:  examples/my_line_rules.py )\nin that a  CommitRule  is only applied once on an entire commit while a  LineRule  is applied for every line in the commit\n(you can also apply it once to the title using a  target  - see the examples section below).  The benefit of a commit rule is that it allows commit rules to implement more complex checks that span multiple lines and/or checks\nthat should only be done once per gitlint run.  While every  LineRule  can be implemented as a  CommitRule , it's usually easier and more concise to go with a  LineRule  if\nthat fits your needs.", 
            "title": "Line and Commit Rules"
        }, 
        {
            "location": "/user_defined_rules/#examples", 
            "text": "In terms of code, writing your own  CommitRule  or  LineRule  is very similar.\nThe only 2 differences between a  CommitRule  and a  LineRule  are the parameters of the  validate(...)  method and the extra target  attribute that  LineRule  requires.  Consider the following  CommitRule  that can be found in  examples/my_commit_rules.py :  from gitlint.rules import CommitRule, RuleViolation\n\nclass SignedOffBy(CommitRule):\n      This rule will enforce that each commit contains a  Signed-Off-By  line.\n    We keep things simple here and just check whether the commit body contains a line that starts with  Signed-Off-By .\n     \n\n    # A rule MUST have a human friendly name\n    name =  body-requires-signed-off-by \n\n    # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule).\n    id =  UC2 \n\n    def validate(self, commit):\n        for line in commit.message.body:\n            if line.startswith( Signed-Off-By ):\n                return []\n\n        return [RuleViolation(self.id,  Body does not contain a 'Signed-Off-By Line' , line_nr=1)]  Note the use of the  name  and  id  class attributes and the  validate(...)  method taking a single  commit  parameter.  Contrast this with the following  LineRule  that can be found in  examples/my_line_rules.py :  from gitlint.rules import LineRule, RuleViolation, CommitMessageTitle\nfrom gitlint.options import ListOption\n\nclass SpecialChars(LineRule):\n      This rule will enforce that the commit message title does not contain any of the following characters:\n        $^%@!*()  \n\n    # A rule MUST have a human friendly name\n    name =  title-no-special-chars \n\n    # A rule MUST have an *unique* id, we recommend starting with UL (for User-defined Line-rule), but this can\n    # really be anything.\n    id =  UL1 \n\n    # A line-rule MUST have a target (not required for CommitRules).\n    target = CommitMessageTitle\n\n    # A rule MAY have an option_spec if its behavior should be configurable.\n    options_spec = [ListOption('special-chars', ['$', '^', '%', '@', '!', '*', '(', ')'],\n                                Comma separated list of characters that should not occur in the title )]\n\n    def validate(self, line, commit):\n        violations = []\n        # options can be accessed by looking them up by their name in self.options\n        for char in self.options['special-chars'].value:\n            if char in line:\n                violation = RuleViolation(self.id,  Title contains the special character '{}' .format(char), line)\n                violations.append(violation)\n\n        return violations  Note the following 2 differences:   extra  target  class attribute : in this example set to  CommitMessageTitle   indicating that this  LineRule \nshould only be applied once to the commit message title. The alternative value for  target  is  CommitMessageBody ,\n in which case gitlint will apply\nyour rule to every line in the commit message body.  validate(...)  takes 2 parameters : Line rules get the  line  against which they are applied as the first parameter and\nthe  commit  object of which the line is part of as second.   In addition, you probably also noticed the extra  options_spec  class attribute which allows you to make your rules configurable.\nOptions are not unique to  LineRule s, they can also be used by  CommitRule s and are further explained in the Options  section below.", 
            "title": "Examples"
        }, 
        {
            "location": "/user_defined_rules/#the-commit-object", 
            "text": "Both  CommitRule s and  LineRule s take a  commit  object in their  validate(...)  methods.\nThe table below outlines the various attributes of that commit object that can be used during validation.     commit attribute  Type  Description      commit.message  object  Python object representing the commit message    commit.message.original  string  Original commit message as returned by git    commit.message.full  string  Full commit message, with comments (lines starting with #) removed.    commit.message.title  string  Title/subject of the commit message: the first line    commit.message.body  list of string  List of lines in the body of the commit message (i.e. starting from the second line)    commit.author_name  string  Name of the author, result of  git log --pretty=%aN    commit.author_email  string  Email of the author, result of  git log --pretty=%aE    commit.date  datetime  Python  datetime  object representing the time of commit    commit.is_merge_commit  boolean  Boolean indicating whether the commit is a merge commit or not.    commit.parents  list of string  List of parent commit  sha s (only for merge commits).    commit.changed_files  list of string  List of files changed in the commit (relative paths).    commit.context  object  Object pointing to the bigger git context that the commit is part of    commit.context.commits  list of commit  List of commits in the git context. Note that this might only be the subset of commits that gitlint is acting on, not all commits in the repo.", 
            "title": "The commit object"
        }, 
        {
            "location": "/user_defined_rules/#violations", 
            "text": "In order to let gitlint know that there is a violation in the commit being linted, users should have the  validate(...) \nmethod in their rules return a list of  RuleViolation s.   Important  The  validate(...)  method doesn't always need to return a list, you can just skip the return statement in case there are no violations.\nHowever, in case of a single violation, validate should return a  list  with a single item.   The  RuleViolation  class has the following generic signature:  RuleViolation(rule_id, message, content=None, line_nr=None):  With the parameters meaning the following:     Parameter  Type  Description      rule_id  string  Rule's unique string id    message  string  Short description of the violation    content  string  (optional) the violating part of commit or line    line_nr  int  (optional) line number in the commit message where the violation occurs.  Automatically set to the correct line number for  LineRule s if not set explicitly.     A typical  validate(...)  implementation for a  CommitRule  would then be as follows:  def validate(self, commit)\n    for line_nr, line in commit.message.body:\n        if  Jon Snow  in line:\n            # we add 1 to the line_nr because we offset the title which is on the first line\n            return [RuleViolation(self.id,  Commit message has the words 'Jon Snow' in it , line, line_nr + 1)]\n    return []  The parameters of this  RuleViolation  can be directly mapped onto gitlint's output as follows:", 
            "title": "Violations"
        }, 
        {
            "location": "/user_defined_rules/#options", 
            "text": "In order to make your own rules configurable, you can add an optional  options_spec  attribute to your rule class\n(supported for both  LineRule  and  CommitRule ).  from gitlint.rules import CommitRule, RuleViolation\nfrom gitlint.options import IntOption\n\nclass BodyMaxLineCount(CommitRule):\n    # A rule MUST have a human friendly name\n    name =  body-max-line-count \n\n    # A rule MUST have an *unique* id, we recommend starting with UC (for User-defined Commit-rule).\n    id =  UC1 \n\n    # A rule MAY have an option_spec if its behavior should be configurable.\n    options_spec = [IntOption('max-line-count', 3,  Maximum body line count )]\n\n    def validate(self, commit):\n        line_count = len(commit.message.body)\n        max_line_count = self.options['max-line-count'].value\n        if line_count   max_line_count:\n            message =  Body contains too many lines ({0}   {1}) .format(line_count, max_line_count)\n            return [RuleViolation(self.id, message, line_nr=1)]  By using  options_spec , you make your option available to be configured through a  .gitlint  file\nor one of the  other ways to configure gitlint . Gitlint automatically takes care of the parsing and input validation.  For example, to change the value of the  max-line-count  option, add the following to your  .gitlint  file:  [body-max-line-count]\nbody-max-line-count=1  As  options_spec  is a list, you can obviously have multiple options per rule. The general signature of an option is: Option(name, default_value, description) .  Gitlint supports a variety of different option types, all can be imported from  gitlint.options :     Option Class  Use for      StrOption  Strings    IntOption  Integers.  IntOption  takes an optional  allow_negative  parameter if you want to allow negative integers.    BoolOption  Booleans. Valid values: true, false. Case-insensitive.    ListOption  List of strings. Comma separated.    PathOption  Directory or file path. Takes an optional  type  parameter for specifying path type ( file ,  dir  (=default) or  both ).      Note  Gitlint currently does not support options for all possible types (e.g. float, filepath, list of int, etc). We could use a hand getting those implemented !", 
            "title": "Options"
        }, 
        {
            "location": "/user_defined_rules/#rule-requirements", 
            "text": "As long as you stick with simple rules that are similar to the sample user-defined rules (see the examples  directory), gitlint\nshould be able to discover and execute them. While clearly you can run any python code you want in your rules,\nyou might run into some issues if you don't follow the conventions that gitlint requires.  While the  rule finding source-code  is the\nultimate source of truth, here are some of the requirements that gitlint enforces:", 
            "title": "Rule requirements"
        }, 
        {
            "location": "/user_defined_rules/#rule-class-requirements", 
            "text": "Rules  must  extend from   LineRule  or  CommitRule  Rule classes  must  have  id  and  name  string attributes. The  options_spec  is optional,\n  but if set, it  must  be a list of gitlint Options.  Rule classes  must  have a  validate  method. In case of a  CommitRule ,  validate    must  take a single  commit  parameter.\n  In case of  LineRule ,  validate   must  take  line  and  commit  as first and second parameters.  LineRule classes  must  have a  target  class attributes that is set to either  CommitMessageTitle  or  CommitMessageBody .  User Rule id's  cannot  start with  R ,  T ,  B  or  M  as these rule ids are reserved for gitlint itself.  Rules  should  have a case-insensitive unique id as only one rule can exist with a given id. While gitlint does not enforce this, having multiple rules with\n  the same id might lead to unexpected or undeterministic behavior.", 
            "title": "Rule class requirements"
        }, 
        {
            "location": "/user_defined_rules/#extra-path-requirements", 
            "text": "If   extra-path  is a directory, it does  not  need to be a proper python package, i.e. it doesn't require an  __init__.py  file.  Python files containing user-defined rules must have a  .py  extension. Files with a different extension will be ignored.  The  extra-path  will be searched non-recursively, i.e. all rule classes must be present at the top level  extra-path  directory.  User rule classes must be defined in the modules that are part of  extra-path , rules that are imported from outside the  extra-path  will be ignored.", 
            "title": "extra-path requirements"
        }, 
        {
            "location": "/contributing/", 
            "text": "We'd love for you to \ncontribute to gitlint\n.\nJust create an issue or open a pull request and we'll get right on it!\nWe maintain a \nwishlist on our wiki\n,\nbut we're obviously open to any suggestions!\n\n\nDevelopment\n\n\nThere is a Vagrantfile in this repository that can be used for development.\n\n\nvagrant up\nvagrant ssh\n\n\n\n\nOr you can choose to use your local environment:\n\n\nvirtualenv .venv\npip install -r requirements.txt -r test-requirements.txt -r doc-requirements.txt\npython setup.py develop\n\n\n\n\nTo run tests:\n\n\n./run_tests.sh                       # run unit tests and print test coverage\n./run_test.sh gitlint/tests/test_body_rules.py::BodyRuleTests::test_body_missing # run a single test\n./run_tests.sh --no-coverage         # run unit tests without test coverage\n./run_tests.sh --integration         # Run integration tests (requires that you have gitlint installed)\n./run_tests.sh --build               # Run build tests (=build python package)\n./run_tests.sh --pep8                # pep8 checks\n./run_tests.sh --stats               # print some code stats\n./run_tests.sh --git                 # inception: run gitlint against itself\n./run_tests.sh --lint                # run pylint checks\n./run_tests.sh --all                 # Run unit, integration, pep8 and gitlint checks\n\n\n\n\nThe \nVagrantfile\n comes with \nvirtualenv\ns for python 2.6, 2.7, 3.3, 3.4, 3.5, 3.6 and pypy2.\nYou can easily run tests against specific python environments by using the following commands \ninside\n of the Vagrant VM:\n\n\n./run_tests.sh --envs 26               # Run the unit tests against Python 2.6\n./run_tests.sh --envs 27,33,pypy2      # Run the unit tests against Python 2.7, Python 3.3 and Pypy2\n./run_tests.sh --envs 27,33 --pep8     # Run pep8 checks against Python 2.7 and Python 3.3 (also works for ```--git```, ```--integration```, ```--pep8```, ```--stats``` and ```--lint```).\n./run_tests.sh --envs all --all        # Run all tests against all environments\n./run_tests.sh --all-env --all         # Idem: Run all tests against all environments\n\n\n\n\n\n\nImportant\n\n\nGitlint commits and pull requests are gated on all of our tests and checks.\n\n\n\n\nPackaging\n\n\nTo see the package description in HTML format\n\n\npip install docutils\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\npython setup.py --long-description | rst2html.py \n output.html\n\n\n\n\nDocumentation\n\n\nOutside the vagrant box (on your host machine):\n\n\nmkdocs serve\n\n\n\n\nThen access the documentation website on your host machine on \nhttp://localhost:8000\n.\nNote that this is only supported for python \n= 2.7.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#development", 
            "text": "There is a Vagrantfile in this repository that can be used for development.  vagrant up\nvagrant ssh  Or you can choose to use your local environment:  virtualenv .venv\npip install -r requirements.txt -r test-requirements.txt -r doc-requirements.txt\npython setup.py develop  To run tests:  ./run_tests.sh                       # run unit tests and print test coverage\n./run_test.sh gitlint/tests/test_body_rules.py::BodyRuleTests::test_body_missing # run a single test\n./run_tests.sh --no-coverage         # run unit tests without test coverage\n./run_tests.sh --integration         # Run integration tests (requires that you have gitlint installed)\n./run_tests.sh --build               # Run build tests (=build python package)\n./run_tests.sh --pep8                # pep8 checks\n./run_tests.sh --stats               # print some code stats\n./run_tests.sh --git                 # inception: run gitlint against itself\n./run_tests.sh --lint                # run pylint checks\n./run_tests.sh --all                 # Run unit, integration, pep8 and gitlint checks  The  Vagrantfile  comes with  virtualenv s for python 2.6, 2.7, 3.3, 3.4, 3.5, 3.6 and pypy2.\nYou can easily run tests against specific python environments by using the following commands  inside  of the Vagrant VM:  ./run_tests.sh --envs 26               # Run the unit tests against Python 2.6\n./run_tests.sh --envs 27,33,pypy2      # Run the unit tests against Python 2.7, Python 3.3 and Pypy2\n./run_tests.sh --envs 27,33 --pep8     # Run pep8 checks against Python 2.7 and Python 3.3 (also works for ```--git```, ```--integration```, ```--pep8```, ```--stats``` and ```--lint```).\n./run_tests.sh --envs all --all        # Run all tests against all environments\n./run_tests.sh --all-env --all         # Idem: Run all tests against all environments   Important  Gitlint commits and pull requests are gated on all of our tests and checks.", 
            "title": "Development"
        }, 
        {
            "location": "/contributing/#packaging", 
            "text": "To see the package description in HTML format  pip install docutils\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\npython setup.py --long-description | rst2html.py   output.html", 
            "title": "Packaging"
        }, 
        {
            "location": "/contributing/#documentation", 
            "text": "Outside the vagrant box (on your host machine):  mkdocs serve  Then access the documentation website on your host machine on  http://localhost:8000 .\nNote that this is only supported for python  = 2.7.", 
            "title": "Documentation"
        }
    ]
}